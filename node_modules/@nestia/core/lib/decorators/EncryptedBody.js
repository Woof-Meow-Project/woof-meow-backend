"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedBody = void 0;
var AesPkcs5_1 = require("@nestia/fetcher/lib/AesPkcs5");
var common_1 = require("@nestjs/common");
var typia_1 = require("typia");
var Singleton_1 = require("../utils/Singleton");
var EncryptedConstant_1 = require("./internal/EncryptedConstant");
var get_text_body_1 = require("./internal/get_text_body");
var headers_to_object_1 = require("./internal/headers_to_object");
var validate_request_body_1 = require("./internal/validate_request_body");
/**
 * Encrypted body decorator.
 *
 * `EncryptedBody` is a decorator function getting `application/json` typed data from
 * requeset body which has been encrypted by AES-128/256 algorithm. Also,
 * `EncyrptedBody` validates the request body data type through
 * [typia](https://github.com/samchon/typia) ad the validation speed is
 * maximum 15,000x times faster than `class-validator`.
 *
 * For reference, when the request body data is not following the promised type `T`,
 * `BadRequestException` error (status code: 400) would be thrown. Also,
 * `EncryptedRoute` decrypts request body using those options.
 *
 *  - AES-128/256
 *  - CBC mode
 *  - PKCS #5 Padding
 *  - Base64 Encoding
 *
 * @return Parameter decorator
 * @author Jeongho Nam - https://github.com/samchon
 */
function EncryptedBody(validator) {
    var checker = (0, validate_request_body_1.validate_request_body)("EncryptedBody")(validator);
    return (0, common_1.createParamDecorator)(function EncryptedBody(_unknown, context) {
        return __awaiter(this, void 0, void 0, function () {
            var request, param, headers, body, password, data, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = context
                            .switchToHttp()
                            .getRequest();
                        if (isTextPlain(request.headers["content-type"]) === false)
                            throw new common_1.BadRequestException("Request body type is not \"text/plain\".");
                        param = Reflect.getMetadata(EncryptedConstant_1.ENCRYPTION_METADATA_KEY, context.getClass());
                        if (!param)
                            throw new Error("Error on nestia.core.EncryptedBody(): no encryption password is given.");
                        headers = new Singleton_1.Singleton(function () {
                            return (0, headers_to_object_1.headers_to_object)(request.headers);
                        });
                        return [4 /*yield*/, (0, get_text_body_1.get_text_body)(request)];
                    case 1:
                        body = _a.sent();
                        password = typeof param === "function"
                            ? param({ headers: headers.get(), body: body, direction: "decode" })
                            : param;
                        data = JSON.parse(decrypt(body, password.key, password.iv));
                        error = checker(data);
                        if (error !== null)
                            throw error;
                        return [2 /*return*/, data];
                }
            });
        });
    })();
}
exports.EncryptedBody = EncryptedBody;
Object.assign(EncryptedBody, typia_1.is);
Object.assign(EncryptedBody, typia_1.assert);
Object.assign(EncryptedBody, typia_1.validate);
/**
 * @internal
 */
var decrypt = function (body, key, iv) {
    try {
        return AesPkcs5_1.AesPkcs5.decrypt(body, key, iv);
    }
    catch (exp) {
        if (exp instanceof Error)
            throw new common_1.BadRequestException("Failed to decrypt the request body. Check your body content or encryption password.");
        else
            throw exp;
    }
};
var isTextPlain = function (text) {
    return text !== undefined &&
        text
            .split(";")
            .map(function (str) { return str.trim(); })
            .some(function (str) { return str === "text/plain"; });
};
//# sourceMappingURL=EncryptedBody.js.map