"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedBody = void 0;
var common_1 = require("@nestjs/common");
var typia_1 = require("typia");
var validate_request_body_1 = require("./internal/validate_request_body");
/**
 * Type safe body decorator.
 *
 * `TypedBody` is a decorator function getting `application/json` typed data from
 * request body. Also, it validates the request body data type through
 * [typia](https://github.com/samchon/typia) and the validation speed is
 * maximum 20,000x times faster than `class-validator`.
 *
 * For reference, when the request body data is not following the promised type `T`,
 * `BadRequestException` error (status code: 400) would be thrown.
 *
 * @param validator Custom validator if required. Default is `typia.assert()`
 * @author Jeongho Nam - https://github.com/samchon
 */
function TypedBody(validator) {
    var checker = (0, validate_request_body_1.validate_request_body)("TypedBody")(validator);
    return (0, common_1.createParamDecorator)(function TypedBody(_unknown, context) {
        var request = context
            .switchToHttp()
            .getRequest();
        if (isApplicationJson(request.headers["content-type"]) === false)
            throw new common_1.BadRequestException("Request body type is not \"application/json\".");
        var error = checker(request.body);
        if (error !== null)
            throw error;
        return request.body;
    })();
}
exports.TypedBody = TypedBody;
Object.assign(TypedBody, typia_1.is);
Object.assign(TypedBody, typia_1.assert);
Object.assign(TypedBody, typia_1.validate);
var isApplicationJson = function (text) {
    return text !== undefined &&
        text
            .split(";")
            .map(function (str) { return str.trim(); })
            .some(function (str) { return str === "application/json"; });
};
//# sourceMappingURL=TypedBody.js.map