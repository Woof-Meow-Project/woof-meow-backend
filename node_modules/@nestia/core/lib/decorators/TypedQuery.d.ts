import { IRequestQueryValidator } from "../options/IRequestQueryValidator";
import { IResponseBodyQuerifier } from "../options/IResponseBodyQuerifier";
/**
 * Type safe URL query decorator.
 *
 * `TypedQuery` is a decorator function that can parse URL query string. It is almost
 * same with {@link nest.Query}, but it can automatically cast property type following
 * its DTO definition. Also, `TypedQuery` performs type validation.
 *
 * For reference, target type `T` must follw such restriction. Also, if actual URL
 * query parameter values are different with their promised type `T`,
 * `BadRequestException` error (status code: 400) would be thrown.
 *
 * 1. Type `T` must be an object type
 * 2. Do not allow dynamic property
 * 3. Only `boolean`, `bigint`, `number`, `string` or their array types are allowed
 * 4. By the way, union type never be not allowed
 *
 * @returns Parameter decorator
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare function TypedQuery<T extends object>(validator?: IRequestQueryValidator<T>): ParameterDecorator;
export declare namespace TypedQuery {
    function Body<T extends object>(validator?: IRequestQueryValidator<T>): ParameterDecorator;
    /**
     * Router decorator function for the GET method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    const Get: {
        (path?: string | string[]): MethodDecorator;
        <T>(stringify?: IResponseBodyQuerifier<T> | undefined): MethodDecorator;
        <T_1>(path: string | string[], stringify?: IResponseBodyQuerifier<T_1> | undefined): MethodDecorator;
    };
    /**
     * Router decorator function for the POST method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    const Post: {
        (path?: string | string[]): MethodDecorator;
        <T>(stringify?: IResponseBodyQuerifier<T> | undefined): MethodDecorator;
        <T_1>(path: string | string[], stringify?: IResponseBodyQuerifier<T_1> | undefined): MethodDecorator;
    };
    /**
     * Router decorator function for the PATH method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    const Patch: {
        (path?: string | string[]): MethodDecorator;
        <T>(stringify?: IResponseBodyQuerifier<T> | undefined): MethodDecorator;
        <T_1>(path: string | string[], stringify?: IResponseBodyQuerifier<T_1> | undefined): MethodDecorator;
    };
    /**
     * Router decorator function for the PUT method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    const Put: {
        (path?: string | string[]): MethodDecorator;
        <T>(stringify?: IResponseBodyQuerifier<T> | undefined): MethodDecorator;
        <T_1>(path: string | string[], stringify?: IResponseBodyQuerifier<T_1> | undefined): MethodDecorator;
    };
    /**
     * Router decorator function for the DELETE method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    const Delete: {
        (path?: string | string[]): MethodDecorator;
        <T>(stringify?: IResponseBodyQuerifier<T> | undefined): MethodDecorator;
        <T_1>(path: string | string[], stringify?: IResponseBodyQuerifier<T_1> | undefined): MethodDecorator;
    };
}
