"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var e_1, _a, e_2, _b, e_3, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedRoute = void 0;
var common_1 = require("@nestjs/common");
var operators_1 = require("rxjs/operators");
var typia_1 = __importDefault(require("typia"));
var get_path_and_stringify_1 = require("./internal/get_path_and_stringify");
var route_error_1 = require("./internal/route_error");
/**
 * Type safe router decorator functions.
 *
 * `TypedRoute` is a module containing router decorator functions which can boost up
 * JSON string conversion speed about 200x times faster than `class-transformer`.
 * Furthermore, such JSON string conversion is even type safe through
 * [typia](https://github.com/samchon/typia).
 *
 * For reference, if you try to invalid data that is not following the promised
 * type `T`, 500 internal server error would be thrown. Also, as `TypedRoute` composes
 * JSON string through `typia.assertStringify<T>()` function, it is not possible to
 * modify response data through interceptors.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
var TypedRoute;
(function (TypedRoute) {
    /**
     * Router decorator function for the GET method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    TypedRoute.Get = Generator("Get");
    /**
     * Router decorator function for the POST method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    TypedRoute.Post = Generator("Post");
    /**
     * Router decorator function for the PATH method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    TypedRoute.Patch = Generator("Patch");
    /**
     * Router decorator function for the PUT method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    TypedRoute.Put = Generator("Put");
    /**
     * Router decorator function for the DELETE method.
     *
     * @param path Path of the HTTP request
     * @returns Method decorator
     */
    TypedRoute.Delete = Generator("Delete");
    /**
     * @internal
     */
    function Generator(method) {
        function route() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a = __read((0, get_path_and_stringify_1.get_path_and_stringify)("TypedRoute.".concat(method)).apply(void 0, __spreadArray([], __read(args), false)), 2), path = _a[0], stringify = _a[1];
            return (0, common_1.applyDecorators)(ROUTERS[method](path), (0, common_1.UseInterceptors)(new TypedRouteInterceptor(stringify)));
        }
        return route;
    }
})(TypedRoute || (exports.TypedRoute = TypedRoute = {}));
try {
    for (var _d = __values([
        typia_1.default.json.stringify,
        typia_1.default.json.isStringify,
        typia_1.default.json.assertStringify,
        typia_1.default.json.validateStringify,
    ]), _e = _d.next(); !_e.done; _e = _d.next()) {
        var method = _e.value;
        try {
            for (var _f = (e_2 = void 0, __values(Object.entries(method))), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
                try {
                    for (var _j = (e_3 = void 0, __values([
                        TypedRoute.Get,
                        TypedRoute.Delete,
                        TypedRoute.Post,
                        TypedRoute.Put,
                        TypedRoute.Patch,
                    ])), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var deco = _k.value;
                        deco[key] = value;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
    }
    finally { if (e_1) throw e_1.error; }
}
/**
 * @internal
 */
var TypedRouteInterceptor = /** @class */ (function () {
    function TypedRouteInterceptor(stringify) {
        this.stringify = stringify;
    }
    TypedRouteInterceptor.prototype.intercept = function (context, next) {
        var _this = this;
        var http = context.switchToHttp();
        var response = http.getResponse();
        response.header("Content-Type", "application/json");
        return next.handle().pipe((0, operators_1.map)(function (value) { return _this.stringify(value); }), (0, operators_1.catchError)(function (err) { return (0, route_error_1.route_error)(http.getRequest(), err); }));
    };
    return TypedRouteInterceptor;
}());
/**
 * @internal
 */
var ROUTERS = {
    Get: common_1.Get,
    Post: common_1.Post,
    Patch: common_1.Patch,
    Put: common_1.Put,
    Delete: common_1.Delete,
};
//# sourceMappingURL=TypedRoute.js.map