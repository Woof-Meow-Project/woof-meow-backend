"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_path_and_querify = void 0;
var common_1 = require("@nestjs/common");
var typia_1 = __importDefault(require("typia"));
var NoTransformConfigureError_1 = require("./NoTransformConfigureError");
/**
 * @internal
 */
var get_path_and_querify = function (method) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var path = args[0] === undefined ||
            typeof args[0] === "string" ||
            Array.isArray(args[0])
            ? args[0]
            : null;
        var functor = path === null ? args[0] : args[1];
        return [path !== null && path !== void 0 ? path : undefined, take(method)(functor)];
    };
};
exports.get_path_and_querify = get_path_and_querify;
/**
 * @internal
 */
var take = function (method) {
    return function (functor) {
        if (functor === undefined)
            throw (0, NoTransformConfigureError_1.NoTransformConfigureError)(method);
        else if (functor === null)
            return querify;
        else if (functor.type === "stringify")
            return functor.stringify;
        else if (functor.type === "assert")
            return assert(functor.assert);
        else if (functor.type === "is")
            return is(functor.is);
        else if (functor.type === "validate")
            return validate(functor.validate);
        throw new Error("Error on nestia.core.".concat(method, "(): invalid typed stringify function."));
    };
};
var querify = function (input) {
    var e_1, _a, e_2, _b;
    var output = new URLSearchParams();
    try {
        for (var _c = __values(Object.entries(input)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
            if (key === undefined)
                continue;
            else if (Array.isArray(value))
                try {
                    for (var value_1 = (e_2 = void 0, __values(value)), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                        var elem = value_1_1.value;
                        output.append(key, String(elem));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (value_1_1 && !value_1_1.done && (_b = value_1.return)) _b.call(value_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            else
                output.append(key, String(value));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return output;
};
/**
 * @internal
 */
var assert = function (closure) {
    return function (data) {
        try {
            return closure(data);
        }
        catch (exp) {
            if ((function (input) {
                var $io0 = function (input) { return "string" === typeof input.method && (undefined === input.path || "string" === typeof input.path) && "string" === typeof input.expected && true && "string" === typeof input.name && "string" === typeof input.message && (undefined === input.stack || "string" === typeof input.stack); };
                return "object" === typeof input && null !== input && $io0(input);
            })(exp))
                throw new common_1.InternalServerErrorException({
                    path: exp.path,
                    reason: exp.message,
                    expected: exp.expected,
                    value: exp.value,
                    message: MESSAGE,
                });
            throw exp;
        }
    };
};
/**
 * @internal
 */
var is = function (closure) {
    return function (data) {
        var result = closure(data);
        if (result === null)
            throw new common_1.InternalServerErrorException(MESSAGE);
        return result;
    };
};
/**
 * @internal
 */
var validate = function (closure) {
    return function (data) {
        var result = closure(data);
        if (result.success === false)
            throw new common_1.InternalServerErrorException({
                errors: result.errors,
                message: MESSAGE,
            });
        return result.data;
    };
};
/**
 * @internal
 */
var MESSAGE = "Response body data is not following the promised type.";
//# sourceMappingURL=get_path_and_querify.js.map