"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_path_and_stringify = void 0;
var common_1 = require("@nestjs/common");
var typia_1 = __importDefault(require("typia"));
var NoTransformConfigureError_1 = require("./NoTransformConfigureError");
/**
 * @internal
 */
var get_path_and_stringify = function (method) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var path = args[0] === undefined ||
            typeof args[0] === "string" ||
            Array.isArray(args[0])
            ? args[0]
            : null;
        var functor = path === null ? args[0] : args[1];
        return [path !== null && path !== void 0 ? path : undefined, take(method)(functor)];
    };
};
exports.get_path_and_stringify = get_path_and_stringify;
/**
 * @internal
 */
var take = function (method) {
    return function (functor) {
        if (functor === undefined)
            throw (0, NoTransformConfigureError_1.NoTransformConfigureError)(method);
        else if (functor === null)
            return JSON.stringify;
        else if (functor.type === "stringify")
            return functor.stringify;
        else if (functor.type === "assert")
            return assert(functor.assert);
        else if (functor.type === "is")
            return is(functor.is);
        else if (functor.type === "validate")
            return validate(functor.validate);
        throw new Error("Error on nestia.core.".concat(method, "(): invalid typed stringify function."));
    };
};
/**
 * @internal
 */
var assert = function (closure) {
    return function (data) {
        try {
            return closure(data);
        }
        catch (exp) {
            if ((function (input) {
                var $io0 = function (input) { return "string" === typeof input.method && (undefined === input.path || "string" === typeof input.path) && "string" === typeof input.expected && true && "string" === typeof input.name && "string" === typeof input.message && (undefined === input.stack || "string" === typeof input.stack); };
                return "object" === typeof input && null !== input && $io0(input);
            })(exp))
                throw new common_1.InternalServerErrorException({
                    path: exp.path,
                    reason: exp.message,
                    expected: exp.expected,
                    value: exp.value,
                    message: MESSAGE,
                });
            throw exp;
        }
    };
};
/**
 * @internal
 */
var is = function (closure) {
    return function (data) {
        var result = closure(data);
        if (result === null)
            throw new common_1.InternalServerErrorException(MESSAGE);
        return result;
    };
};
/**
 * @internal
 */
var validate = function (closure) {
    return function (data) {
        var result = closure(data);
        if (result.success === false)
            throw new common_1.InternalServerErrorException({
                errors: result.errors,
                message: MESSAGE,
            });
        return result.data;
    };
};
/**
 * @internal
 */
var MESSAGE = "Response body data is not following the promised type.";
//# sourceMappingURL=get_path_and_stringify.js.map