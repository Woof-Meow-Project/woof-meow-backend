"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedExceptionProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var JsonMetadataFactory_1 = require("typia/lib/factories/JsonMetadataFactory");
var TypeFactory_1 = require("typia/lib/factories/TypeFactory");
var TransformerError_1 = require("typia/lib/transformers/TransformerError");
var TypedExceptionProgrammer;
(function (TypedExceptionProgrammer) {
    TypedExceptionProgrammer.generate = function (_a) {
        var checker = _a.checker;
        return function (expression) {
            var _a, _b;
            // CHECK GENERIC ARGUMENT EXISTENCE
            if (!((_a = expression.typeArguments) === null || _a === void 0 ? void 0 : _a[0]))
                throw TransformerError_1.TransformerError.from("@nestia.core.TypedException")([
                    {
                        name: "uknown",
                        messages: [NOT_SPECIFIED],
                        explore: {
                            top: true,
                            object: null,
                            property: null,
                            nested: null,
                            escaped: false,
                            aliased: false,
                        },
                    },
                ]);
            // GET TYPE INFO
            var node = expression.typeArguments[0];
            var type = checker.getTypeFromTypeNode(node);
            // VALIDATE TYPE
            if (type.isTypeParameter())
                throw TransformerError_1.TransformerError.from("@nestia.core.TypedException")([
                    {
                        name: TypeFactory_1.TypeFactory.getFullName(checker)(type),
                        messages: [NO_GENERIC_ARGUMENT],
                        explore: {
                            top: true,
                            object: null,
                            property: null,
                            nested: null,
                            escaped: false,
                            aliased: false,
                        },
                    },
                ]);
            JsonMetadataFactory_1.JsonMetadataFactory.analyze("@nestia.core.TypedException")(checker)(type);
            // CHECK DUPLICATED TRNASFORMATION
            if (expression.arguments.length === 3)
                return expression;
            // DO TRANSFORM
            var name = TypeFactory_1.TypeFactory.getFullName(checker)(type);
            return typescript_1.default.factory.updateCallExpression(expression, expression.expression, expression.typeArguments, [
                expression.arguments[0],
                (_b = expression.arguments[1]) !== null && _b !== void 0 ? _b : typescript_1.default.factory.createIdentifier("undefined"),
                typescript_1.default.factory.createStringLiteral(name),
            ]);
        };
    };
})(TypedExceptionProgrammer || (exports.TypedExceptionProgrammer = TypedExceptionProgrammer = {}));
var NOT_SPECIFIED = "Error on @nestia.core.TypedException(): generic argument is not specified.";
var NO_GENERIC_ARGUMENT = "Error on @nestia.core.TypedException(): non-specified generic argument.";
//# sourceMappingURL=TypedExceptionProgrammer.js.map