"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedQueryBodyProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var HttpAssertQueryProgrammer_1 = require("typia/lib/programmers/http/HttpAssertQueryProgrammer");
var HttpIsQueryProgrammer_1 = require("typia/lib/programmers/http/HttpIsQueryProgrammer");
var HttpValidateQueryProgrammer_1 = require("typia/lib/programmers/http/HttpValidateQueryProgrammer");
var TypedQueryBodyProgrammer;
(function (TypedQueryBodyProgrammer) {
    TypedQueryBodyProgrammer.generate = function (project) {
        return function (modulo) {
            return function (type) {
                // GENERATE VALIDATION PLAN
                var parameter = function (key) {
                    return function (programmer) {
                        return typescript_1.default.factory.createObjectLiteralExpression([
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {
                                    numeric: false,
                                    finite: false,
                                    functional: false,
                                } }))(modulo)(type)),
                        ]);
                    };
                };
                // RETURNS
                var category = project.options.validate;
                if (category === "is" || category === "equals")
                    return parameter("is")(HttpIsQueryProgrammer_1.HttpIsQueryProgrammer.write);
                else if (category === "validate" || category === "validateEquals")
                    return parameter("validate")(HttpValidateQueryProgrammer_1.HttpValidateQueryProgrammer.write);
                return parameter("assert")(HttpAssertQueryProgrammer_1.HttpAssertQueryProgrammer.write);
            };
        };
    };
})(TypedQueryBodyProgrammer || (exports.TypedQueryBodyProgrammer = TypedQueryBodyProgrammer = {}));
//# sourceMappingURL=TypedQueryBodyProgrammer.js.map