"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedQueryRouteProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var HttpAssertQuerifyProgrammer_1 = require("./http/HttpAssertQuerifyProgrammer");
var HttpIsQuerifyProgrammer_1 = require("./http/HttpIsQuerifyProgrammer");
var HttpQuerifyProgrammer_1 = require("./http/HttpQuerifyProgrammer");
var HttpValidateQuerifyProgrammer_1 = require("./http/HttpValidateQuerifyProgrammer");
var TypedQueryRouteProgrammer;
(function (TypedQueryRouteProgrammer) {
    TypedQueryRouteProgrammer.generate = function (project) {
        return function (modulo) {
            return function (type) {
                // GENERATE STRINGIFY PLAN
                var parameter = function (key, programmer) {
                    return typescript_1.default.factory.createObjectLiteralExpression([
                        typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                        typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {} }))(modulo)(type)),
                    ]);
                };
                // RETURNS
                if (project.options.stringify === "is")
                    return parameter("is", HttpIsQuerifyProgrammer_1.HttpIsQuerifyProgrammer.write);
                else if (project.options.stringify === "validate")
                    return parameter("validate", HttpValidateQuerifyProgrammer_1.HttpValidateQuerifyProgrammer.write);
                else if (project.options.stringify === "stringify")
                    return parameter("stringify", HttpQuerifyProgrammer_1.HttpQuerifyProgrammer.write);
                else if (project.options.stringify === null)
                    return typescript_1.default.factory.createNull();
                // ASSERT IS DEFAULT
                return parameter("assert", HttpAssertQuerifyProgrammer_1.HttpAssertQuerifyProgrammer.write);
            };
        };
    };
})(TypedQueryRouteProgrammer || (exports.TypedQueryRouteProgrammer = TypedQueryRouteProgrammer = {}));
//# sourceMappingURL=TypedQueryRouteProgrammer.js.map