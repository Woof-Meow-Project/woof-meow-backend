"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedRouteProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var JsonAssertStringifyProgrammer_1 = require("typia/lib/programmers/json/JsonAssertStringifyProgrammer");
var JsonIsStringifyProgrammer_1 = require("typia/lib/programmers/json/JsonIsStringifyProgrammer");
var JsonStringifyProgrammer_1 = require("typia/lib/programmers/json/JsonStringifyProgrammer");
var JsonValidateStringifyProgrammer_1 = require("typia/lib/programmers/json/JsonValidateStringifyProgrammer");
var TypedRouteProgrammer;
(function (TypedRouteProgrammer) {
    TypedRouteProgrammer.generate = function (project) {
        return function (modulo) {
            return function (type) {
                // GENERATE STRINGIFY PLAN
                var parameter = function (key, programmer) {
                    return typescript_1.default.factory.createObjectLiteralExpression([
                        typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                        typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {} }))(modulo)(type)),
                    ]);
                };
                // RETURNS
                if (project.options.stringify === "is")
                    return parameter("is", JsonIsStringifyProgrammer_1.JsonIsStringifyProgrammer.write);
                else if (project.options.stringify === "validate")
                    return parameter("validate", JsonValidateStringifyProgrammer_1.JsonValidateStringifyProgrammer.write);
                else if (project.options.stringify === "stringify")
                    return parameter("stringify", JsonStringifyProgrammer_1.JsonStringifyProgrammer.write);
                else if (project.options.stringify === null)
                    return typescript_1.default.factory.createNull();
                // ASSERT IS DEFAULT
                return parameter("assert", JsonAssertStringifyProgrammer_1.JsonAssertStringifyProgrammer.write);
            };
        };
    };
})(TypedRouteProgrammer || (exports.TypedRouteProgrammer = TypedRouteProgrammer = {}));
//# sourceMappingURL=TypedRouteProgrammer.js.map