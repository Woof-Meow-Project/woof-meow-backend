"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpQuerifyProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("typia/lib/factories/IdentifierFactory");
var MetadataCollection_1 = require("typia/lib/factories/MetadataCollection");
var MetadataFactory_1 = require("typia/lib/factories/MetadataFactory");
var StatementFactory_1 = require("typia/lib/factories/StatementFactory");
var FunctionImporeter_1 = require("typia/lib/programmers/helpers/FunctionImporeter");
var HttpQueryProgrammer_1 = require("typia/lib/programmers/http/HttpQueryProgrammer");
var TransformerError_1 = require("typia/lib/transformers/TransformerError");
var HttpQuerifyProgrammer;
(function (HttpQuerifyProgrammer) {
    HttpQuerifyProgrammer.write = function (project) {
        return function (modulo) {
            return function (type) {
                // GET OBJECT TYPE
                var importer = new FunctionImporeter_1.FunctionImporter(modulo.getText());
                var collection = new MetadataCollection_1.MetadataCollection();
                var result = MetadataFactory_1.MetadataFactory.analyze(project.checker)({
                    escape: false,
                    constant: true,
                    absorb: true,
                    validate: HttpQueryProgrammer_1.HttpQueryProgrammer.validate,
                })(collection)(type);
                if (result.success === false)
                    throw TransformerError_1.TransformerError.from("@nestia.core.TypedQuery.".concat(importer.method))(result.errors);
                var object = result.data.objects[0];
                return typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("input")], undefined, undefined, typescript_1.default.factory.createBlock(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(importer.declare(modulo)), false), [
                    StatementFactory_1.StatementFactory.constant("output", typescript_1.default.factory.createNewExpression(typescript_1.default.factory.createIdentifier("URLSearchParams"), undefined, []))
                ], false), __read(object.properties.map(function (p) {
                    return typescript_1.default.factory.createExpressionStatement(decode(p.key.constants[0].values[0])(p.value));
                })), false), [
                    typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createIdentifier("output")),
                ], false), true));
            };
        };
    };
    var decode = function (key) {
        return function (value) {
            return !!value.arrays.length
                ? typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier("input"))(key))("forEach"), undefined, [
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("elem")], undefined, undefined, append(key)(typescript_1.default.factory.createIdentifier("elem"))),
                ])
                : append(key)(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier("input"))(key));
        };
    };
    var append = function (key) { return function (elem) {
        return typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier("output"))("append"), undefined, [typescript_1.default.factory.createStringLiteral(key), elem]);
    }; };
})(HttpQuerifyProgrammer || (exports.HttpQuerifyProgrammer = HttpQuerifyProgrammer = {}));
//# sourceMappingURL=HttpQuerifyProgrammer.js.map