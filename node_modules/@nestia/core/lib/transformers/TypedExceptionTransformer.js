"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedExceptionTransformer = void 0;
var path_1 = __importDefault(require("path"));
var typescript_1 = __importDefault(require("typescript"));
var TypedExceptionProgrammer_1 = require("../programmers/TypedExceptionProgrammer");
var TypedExceptionTransformer;
(function (TypedExceptionTransformer) {
    TypedExceptionTransformer.transform = function (project) {
        return function (decorator) {
            if (!typescript_1.default.isCallExpression(decorator.expression))
                return decorator;
            // CHECK SIGNATURE
            var signature = project.checker.getResolvedSignature(decorator.expression);
            if (!signature || !signature.declaration)
                return decorator;
            // CHECK TO BE TRANSFORMED
            var done = (function () {
                // CHECK FILENAME
                var location = path_1.default.resolve(signature.declaration.getSourceFile().fileName);
                if (location.indexOf(LIB_PATH) === -1 && location !== SRC_PATH)
                    return false;
                // CHECK DUPLICATED
                return decorator.expression.arguments.length !== 3;
            })();
            if (done === false)
                return decorator;
            // DO TRANSFORM
            return typescript_1.default.factory.createDecorator(TypedExceptionProgrammer_1.TypedExceptionProgrammer.generate(project)(decorator.expression));
        };
    };
    var LIB_PATH = path_1.default.join("node_modules", "@nestia", "core", "lib", "decorators", "TypedException.d.ts");
    var SRC_PATH = path_1.default.resolve(path_1.default.join(__dirname, "..", "decorators", "TypedException.ts"));
})(TypedExceptionTransformer || (exports.TypedExceptionTransformer = TypedExceptionTransformer = {}));
//# sourceMappingURL=TypedExceptionTransformer.js.map