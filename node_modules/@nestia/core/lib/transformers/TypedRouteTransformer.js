"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedRouteTransformer = void 0;
var path_1 = __importDefault(require("path"));
var typescript_1 = __importDefault(require("typescript"));
var TypedQueryRouteProgrammer_1 = require("../programmers/TypedQueryRouteProgrammer");
var TypedRouteProgrammer_1 = require("../programmers/TypedRouteProgrammer");
var TypedRouteTransformer;
(function (TypedRouteTransformer) {
    TypedRouteTransformer.transform = function (project) {
        return function (type) {
            return function (decorator) {
                if (!typescript_1.default.isCallExpression(decorator.expression))
                    return decorator;
                // CHECK SIGNATURE
                var signature = project.checker.getResolvedSignature(decorator.expression);
                if (!signature || !signature.declaration)
                    return decorator;
                // CHECK TO BE TRANSFORMED
                var modulo = (function () {
                    var _a;
                    // CHECK FILENAME
                    var location = path_1.default.resolve(signature.declaration.getSourceFile().fileName);
                    if (LIB_PATHS.every(function (str) { return location.indexOf(str) === -1; }) &&
                        SRC_PATHS.every(function (str) { return location !== str; }))
                        return null;
                    // CHECK DUPLICATE BOOSTER
                    if (decorator.expression.arguments.length >= 2)
                        return false;
                    else if (decorator.expression.arguments.length === 1) {
                        var last = decorator.expression.arguments[decorator.expression.arguments.length - 1];
                        var type_1 = project.checker.getTypeAtLocation(last);
                        if (isObject(project.checker)(type_1))
                            return false;
                    }
                    return ((_a = location.split(path_1.default.sep).at(-1)) === null || _a === void 0 ? void 0 : _a.split(".")[0]) ===
                        "TypedQuery"
                        ? "TypedQuery"
                        : "TypedRoute";
                })();
                if (modulo === null)
                    return decorator;
                // CHECK TYPE NODE
                var typeNode = project.checker.typeToTypeNode(type, undefined, undefined);
                if (typeNode === undefined)
                    return decorator;
                // DO TRANSFORM
                return typescript_1.default.factory.createDecorator(typescript_1.default.factory.updateCallExpression(decorator.expression, decorator.expression.expression, decorator.expression.typeArguments, __spreadArray(__spreadArray([], __read(decorator.expression.arguments), false), [
                    (modulo === "TypedQuery"
                        ? TypedQueryRouteProgrammer_1.TypedQueryRouteProgrammer
                        : TypedRouteProgrammer_1.TypedRouteProgrammer).generate(project)(decorator.expression.expression)(type),
                ], false)));
            };
        };
    };
    var isObject = function (checker) {
        return function (type) {
            return (type.getFlags() & typescript_1.default.TypeFlags.Object) !== 0 &&
                !checker.isTupleType(type) &&
                !checker.isArrayType(type) &&
                !checker.isArrayLikeType(type);
        };
    };
    var CLASSES = ["EncryptedRoute", "TypedRoute", "TypedQuery"];
    var LIB_PATHS = CLASSES.map(function (cla) {
        return path_1.default.join("node_modules", "@nestia", "core", "lib", "decorators", "".concat(cla, ".d.ts"));
    });
    var SRC_PATHS = CLASSES.map(function (cla) {
        return path_1.default.resolve(path_1.default.join(__dirname, "..", "decorators", "".concat(cla, ".ts")));
    });
})(TypedRouteTransformer || (exports.TypedRouteTransformer = TypedRouteTransformer = {}));
//# sourceMappingURL=TypedRouteTransformer.js.map