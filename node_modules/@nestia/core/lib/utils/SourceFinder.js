"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceFinder = void 0;
var fs_1 = __importDefault(require("fs"));
var glob_1 = __importDefault(require("glob"));
var path_1 = __importDefault(require("path"));
var SourceFinder;
(function (SourceFinder) {
    var _this = this;
    SourceFinder.find = function (props) { return __awaiter(_this, void 0, void 0, function () {
        var dict;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    dict = new Set();
                    return [4 /*yield*/, emplace(props.filter)(props.include)(function (str) { return dict.add(str); })];
                case 1:
                    _b.sent();
                    if (!((_a = props.exclude) === null || _a === void 0 ? void 0 : _a.length)) return [3 /*break*/, 3];
                    return [4 /*yield*/, emplace(props.filter)(props.exclude)(function (str) {
                            return dict.delete(str);
                        })];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3: return [2 /*return*/, __spreadArray([], __read(dict), false)];
            }
        });
    }); };
    var emplace = function (filter) {
        return function (input) {
            return function (closure) { return __awaiter(_this, void 0, void 0, function () {
                var input_1, input_1_1, pattern, _a, _b, file, stats, e_1_1, e_2_1;
                var e_2, _c, e_1, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _e.trys.push([0, 14, 15, 16]);
                            input_1 = __values(input), input_1_1 = input_1.next();
                            _e.label = 1;
                        case 1:
                            if (!!input_1_1.done) return [3 /*break*/, 13];
                            pattern = input_1_1.value;
                            _e.label = 2;
                        case 2:
                            _e.trys.push([2, 10, 11, 12]);
                            e_1 = void 0;
                            return [4 /*yield*/, _Glob(path_1.default.resolve(pattern))];
                        case 3:
                            _a = (__values.apply(void 0, [_e.sent()])), _b = _a.next();
                            _e.label = 4;
                        case 4:
                            if (!!_b.done) return [3 /*break*/, 9];
                            file = _b.value;
                            return [4 /*yield*/, fs_1.default.promises.stat(file)];
                        case 5:
                            stats = _e.sent();
                            if (!(stats.isDirectory() === true)) return [3 /*break*/, 7];
                            return [4 /*yield*/, iterate(filter)(closure)(file)];
                        case 6:
                            _e.sent();
                            return [3 /*break*/, 8];
                        case 7:
                            if (stats.isFile() && filter(file))
                                closure(file);
                            _e.label = 8;
                        case 8:
                            _b = _a.next();
                            return [3 /*break*/, 4];
                        case 9: return [3 /*break*/, 12];
                        case 10:
                            e_1_1 = _e.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 12];
                        case 11:
                            try {
                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 12:
                            input_1_1 = input_1.next();
                            return [3 /*break*/, 1];
                        case 13: return [3 /*break*/, 16];
                        case 14:
                            e_2_1 = _e.sent();
                            e_2 = { error: e_2_1 };
                            return [3 /*break*/, 16];
                        case 15:
                            try {
                                if (input_1_1 && !input_1_1.done && (_c = input_1.return)) _c.call(input_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                            return [7 /*endfinally*/];
                        case 16: return [2 /*return*/];
                    }
                });
            }); };
        };
    };
    var iterate = function (filter) {
        return function (closure) {
            return function (location) { return __awaiter(_this, void 0, void 0, function () {
                var directory, directory_1, directory_1_1, file, next, stats, e_3_1;
                var e_3, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, fs_1.default.promises.readdir(location)];
                        case 1:
                            directory = _b.sent();
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 9, 10, 11]);
                            directory_1 = __values(directory), directory_1_1 = directory_1.next();
                            _b.label = 3;
                        case 3:
                            if (!!directory_1_1.done) return [3 /*break*/, 8];
                            file = directory_1_1.value;
                            next = path_1.default.resolve("".concat(location, "/").concat(file));
                            return [4 /*yield*/, fs_1.default.promises.stat(next)];
                        case 4:
                            stats = _b.sent();
                            if (!(stats.isDirectory() === true)) return [3 /*break*/, 6];
                            return [4 /*yield*/, iterate(filter)(closure)(next)];
                        case 5:
                            _b.sent();
                            return [3 /*break*/, 7];
                        case 6:
                            if (stats.isFile() && filter(next))
                                closure(next);
                            _b.label = 7;
                        case 7:
                            directory_1_1 = directory_1.next();
                            return [3 /*break*/, 3];
                        case 8: return [3 /*break*/, 11];
                        case 9:
                            e_3_1 = _b.sent();
                            e_3 = { error: e_3_1 };
                            return [3 /*break*/, 11];
                        case 10:
                            try {
                                if (directory_1_1 && !directory_1_1.done && (_a = directory_1.return)) _a.call(directory_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                            return [7 /*endfinally*/];
                        case 11: return [2 /*return*/];
                    }
                });
            }); };
        };
    };
    var _Glob = function (pattern) {
        return new Promise(function (resolve, reject) {
            (0, glob_1.default)(pattern, function (err, matches) {
                if (err)
                    reject(err);
                else
                    resolve(matches.map(function (str) { return path_1.default.resolve(str); }));
            });
        });
    };
})(SourceFinder || (exports.SourceFinder = SourceFinder = {}));
//# sourceMappingURL=SourceFinder.js.map