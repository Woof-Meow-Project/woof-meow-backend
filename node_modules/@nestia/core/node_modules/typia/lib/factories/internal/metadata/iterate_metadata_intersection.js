"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_intersection = void 0;
var typescript_1 = __importDefault(require("typescript"));
var MetadataAtomic_1 = require("../../../schemas/metadata/MetadataAtomic");
var ArrayUtil_1 = require("../../../utils/ArrayUtil");
var MetadataCollection_1 = require("../../MetadataCollection");
var MetadataTypeTagFactory_1 = require("../../MetadataTypeTagFactory");
var explore_metadata_1 = require("./explore_metadata");
var iterate_metadata_1 = require("./iterate_metadata");
var iterate_metadata_array_1 = require("./iterate_metadata_array");
var iterate_metadata_intersection = function (checker) {
    return function (options) {
        return function (collection) {
            return function (errors) {
                return function (meta, type, explore) {
                    var e_1, _a, e_2, _b, e_3, _c;
                    var _d;
                    if (!type.isIntersection())
                        return false;
                    else if (type.types.every(function (child) {
                        return (child.getFlags() & typescript_1.default.TypeFlags.Object) !== 0 &&
                            !checker.isArrayType(child) &&
                            !checker.isTupleType(child);
                    }))
                        return false;
                    var fakeCollection = new MetadataCollection_1.MetadataCollection();
                    var fakeErrors = [];
                    var children = __spreadArray([], __read(new Map(type.types.map(function (t) {
                        var m = (0, explore_metadata_1.explore_metadata)(checker)(__assign(__assign({}, options), { absorb: true }))(fakeCollection)(fakeErrors)(t, __assign(__assign({}, explore), { aliased: false }));
                        return [m.getName(), m];
                    })).values()), false);
                    if (fakeErrors.length) {
                        errors.push.apply(errors, __spreadArray([], __read(fakeErrors), false));
                        return true;
                    }
                    if (children.length === 1) {
                        (0, iterate_metadata_1.iterate_metadata)(checker)(options)(collection)(errors)(meta, type.types[0], explore);
                        return true;
                    }
                    else if (children.every(function (c) { return c.objects.length === 1 && c.size() === 1; }))
                        return false;
                    var booleanLiteral = (function () {
                        var _a, _b;
                        var found = (_b = (_a = children.find(function (c) {
                            return c.size() === 1 &&
                                c.constants.length === 1 &&
                                c.constants[0].type === "boolean";
                        })) === null || _a === void 0 ? void 0 : _a.constants[0]) === null || _b === void 0 ? void 0 : _b.values[0];
                        if (found === undefined)
                            return null;
                        return children.every(function (c) {
                            return c.atomics.length === 0 ||
                                c.atomics.every(function (a) { return a.type !== "boolean"; });
                        })
                            ? found
                            : null;
                    })();
                    if (booleanLiteral !== null &&
                        meta.boolean_literal_intersected_ === true) {
                        meta.constants.find(function (c) { return c.type === "boolean"; })
                            .values.push(booleanLiteral);
                        return true;
                    }
                    var individuals = children
                        .map(function (child, i) { return [child, i]; })
                        .filter(function (_a) {
                        var _b = __read(_a, 1), c = _b[0];
                        return c.size() === 1 &&
                            (c.atomics.length === 1 ||
                                (c.constants.length === 1 &&
                                    c.constants[0].type === "boolean") ||
                                c.arrays.length === 1);
                    });
                    var constants = children.filter(function (m) {
                        return m.size() ===
                            m.constants
                                .map(function (c) { return c.values.length; })
                                .reduce(function (a, b) { return a + b; }, 0) +
                                m.templates.length &&
                            !(m.size() === 1 && m.constants[0].type === "boolean");
                    });
                    var objects = children.filter(function (c) {
                        return c.nullable === false &&
                            c.isRequired() === true &&
                            c.objects.length &&
                            c.objects.length === c.size() &&
                            c.objects.every(function (o) {
                                return o.properties.every(function (p) { return p.value.optional; });
                            });
                    });
                    var atomics = new Set(individuals
                        .map(function (_a) {
                        var _b = __read(_a, 1), c = _b[0];
                        return __spreadArray(__spreadArray([], __read(c.atomics.map(function (a) { return a.type; })), false), __read(c.constants
                            .filter(function (l) { return l.type === "boolean"; })
                            .map(function (l) { return l.type; })), false);
                    })
                        .flat());
                    var arrays = new Set(individuals.map(function (_a) {
                        var _b = __read(_a, 1), c = _b[0];
                        return c.arrays.map(function (a) { return a.type.name; });
                    }).flat());
                    if (atomics.size + arrays.size > 1 ||
                        individuals.length + objects.length + constants.length !==
                            children.length) {
                        errors.push({
                            name: children.map(function (c) { return c.getName(); }).join(" & "),
                            explore: __assign({}, explore),
                            messages: ["nonsensible intersection"],
                        });
                        return true;
                    }
                    else if (atomics.size === 0 &&
                        arrays.size === 0 &&
                        constants.length) {
                        try {
                            for (var constants_1 = __values(constants), constants_1_1 = constants_1.next(); !constants_1_1.done; constants_1_1 = constants_1.next()) {
                                var m = constants_1_1.value;
                                try {
                                    for (var _e = (e_2 = void 0, __values(m.templates)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                        var tpl = _f.value;
                                        ArrayUtil_1.ArrayUtil.add(meta.templates, tpl, function (a, b) {
                                            return a.map(function (ab) { return ab.getName(); }).join(" | ") ===
                                                b.map(function (bb) { return bb.getName(); }).join(" | ");
                                        });
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                var _loop_1 = function (c) {
                                    var e_4, _j;
                                    var oldbie = meta.constants.find(function (o) { return o.type === c.type; });
                                    if (oldbie)
                                        try {
                                            for (var _k = (e_4 = void 0, __values(c.values)), _l = _k.next(); !_l.done; _l = _k.next()) {
                                                var elem = _l.value;
                                                ArrayUtil_1.ArrayUtil.add(oldbie.values, elem, function (a, b) { return a === b; });
                                            }
                                        }
                                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                        finally {
                                            try {
                                                if (_l && !_l.done && (_j = _k.return)) _j.call(_k);
                                            }
                                            finally { if (e_4) throw e_4.error; }
                                        }
                                    else
                                        meta.constants.push(__assign({}, c));
                                };
                                try {
                                    for (var _g = (e_3 = void 0, __values(m.constants)), _h = _g.next(); !_h.done; _h = _g.next()) {
                                        var c = _h.value;
                                        _loop_1(c);
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (constants_1_1 && !constants_1_1.done && (_a = constants_1.return)) _a.call(constants_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return true;
                    }
                    var target = booleanLiteral
                        ? "boolean"
                        : atomics.size
                            ? atomics.values().next().value
                            : "array";
                    if (target === "boolean" ||
                        target === "bigint" ||
                        target === "number" ||
                        target === "string")
                        if (booleanLiteral === null)
                            ArrayUtil_1.ArrayUtil.add(meta.atomics, MetadataAtomic_1.MetadataAtomic.create({
                                type: atomics.values().next().value,
                                tags: [],
                            }), function (a, b) { return a.type === b.type; });
                        else
                            ArrayUtil_1.ArrayUtil.take(meta.constants, function (x) { return x.type === "boolean"; }, function () { return ({
                                type: "boolean",
                                values: [booleanLiteral],
                            }); });
                    else if (target === "array") {
                        var name_1 = arrays.values().next().value;
                        if (!meta.arrays.some(function (a) { return a.type.name === name_1; })) {
                            (0, iterate_metadata_array_1.iterate_metadata_array)(checker)(options)(collection)(errors)(meta, type.types[individuals.find(function (i) { return i[0].arrays.length === 1; })[1]], __assign(__assign({}, explore), { aliased: false, escaped: false }));
                        }
                    }
                    if (objects.length) {
                        var tags = MetadataTypeTagFactory_1.MetadataTypeTagFactory.analyze(errors)(target)(objects.map(function (om) { return om.objects; }).flat(), explore);
                        if (tags.length)
                            if (target === "array")
                                meta.arrays.at(-1).tags.push(tags);
                            else if (booleanLiteral === null)
                                meta.atomics
                                    .find(function (a) { return a.type === target; })
                                    .tags.push(tags);
                            else {
                                var constant = meta.constants.find(function (c) { return c.type === "boolean"; });
                                (_d = constant.tags) !== null && _d !== void 0 ? _d : (constant.tags = []);
                                constant.tags.push(tags);
                            }
                    }
                    if (booleanLiteral !== null)
                        meta.boolean_literal_intersected_ = true;
                    return true;
                };
            };
        };
    };
};
exports.iterate_metadata_intersection = iterate_metadata_intersection;
//# sourceMappingURL=iterate_metadata_intersection.js.map