"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParameter = exports.createValidateHeaders = exports.createIsHeaders = exports.createAssertHeaders = exports.createHeaders = exports.createValidateQuery = exports.createIsQuery = exports.createAssertQuery = exports.createQuery = exports.parameter = exports.validateHeaders = exports.isHeaders = exports.assertHeaders = exports.headers = exports.validateQuery = exports.isQuery = exports.assertQuery = exports.query = void 0;
var Namespace_1 = require("./functional/Namespace");
function query() {
    halt("query");
}
exports.query = query;
Object.assign(query, Namespace_1.Namespace.http.query());
function assertQuery() {
    halt("assertQuery");
}
exports.assertQuery = assertQuery;
Object.assign(assertQuery, Namespace_1.Namespace.http.query());
Object.assign(assertQuery, Namespace_1.Namespace.assert("http.assertQuery"));
function isQuery() {
    halt("isQuery");
}
exports.isQuery = isQuery;
Object.assign(isQuery, Namespace_1.Namespace.http.query());
Object.assign(isQuery, Namespace_1.Namespace.is());
function validateQuery() {
    halt("validateQuery");
}
exports.validateQuery = validateQuery;
Object.assign(validateQuery, Namespace_1.Namespace.http.query());
Object.assign(validateQuery, Namespace_1.Namespace.validate());
function headers() {
    halt("headers");
}
exports.headers = headers;
Object.assign(headers, Namespace_1.Namespace.http.headers());
function assertHeaders() {
    halt("assertHeaders");
}
exports.assertHeaders = assertHeaders;
Object.assign(assertHeaders, Namespace_1.Namespace.http.headers());
Object.assign(assertHeaders, Namespace_1.Namespace.assert("http.assertHeaders"));
function isHeaders() {
    halt("isHeaders");
}
exports.isHeaders = isHeaders;
Object.assign(isHeaders, Namespace_1.Namespace.http.headers());
Object.assign(isHeaders, Namespace_1.Namespace.is());
function validateHeaders() {
    halt("validateHeaders");
}
exports.validateHeaders = validateHeaders;
Object.assign(validateHeaders, Namespace_1.Namespace.http.headers());
Object.assign(validateHeaders, Namespace_1.Namespace.validate());
function parameter() {
    halt("parameter");
}
exports.parameter = parameter;
Object.assign(parameter, Namespace_1.Namespace.http.parameter());
Object.assign(parameter, Namespace_1.Namespace.assert("http.parameter"));
function createQuery() {
    halt("createQuery");
}
exports.createQuery = createQuery;
Object.assign(createQuery, Namespace_1.Namespace.http.query());
function createAssertQuery() {
    halt("createAssertQuery");
}
exports.createAssertQuery = createAssertQuery;
Object.assign(createAssertQuery, Namespace_1.Namespace.http.query());
Object.assign(createAssertQuery, Namespace_1.Namespace.assert("http.createAssertQuery"));
function createIsQuery() {
    halt("createIsQuery");
}
exports.createIsQuery = createIsQuery;
Object.assign(createIsQuery, Namespace_1.Namespace.http.query());
Object.assign(createIsQuery, Namespace_1.Namespace.is());
function createValidateQuery() {
    halt("createValidateQuery");
}
exports.createValidateQuery = createValidateQuery;
Object.assign(createValidateQuery, Namespace_1.Namespace.http.query());
Object.assign(createValidateQuery, Namespace_1.Namespace.validate());
function createHeaders() {
    halt("createHeaders");
}
exports.createHeaders = createHeaders;
Object.assign(createHeaders, Namespace_1.Namespace.http.headers());
function createAssertHeaders() {
    halt("createAssertHeaders");
}
exports.createAssertHeaders = createAssertHeaders;
Object.assign(createAssertHeaders, Namespace_1.Namespace.http.headers());
Object.assign(createAssertHeaders, Namespace_1.Namespace.assert("http.createAssertHeaders"));
function createIsHeaders() {
    halt("createIsHeaders");
}
exports.createIsHeaders = createIsHeaders;
Object.assign(createIsHeaders, Namespace_1.Namespace.http.headers());
Object.assign(createIsHeaders, Namespace_1.Namespace.is());
function createValidateHeaders() {
    halt("createValidateHeaders");
}
exports.createValidateHeaders = createValidateHeaders;
Object.assign(createValidateHeaders, Namespace_1.Namespace.http.headers());
Object.assign(createValidateHeaders, Namespace_1.Namespace.validate());
function createParameter() {
    halt("createParameter");
}
exports.createParameter = createParameter;
Object.assign(createParameter, Namespace_1.Namespace.http.parameter());
Object.assign(createParameter, Namespace_1.Namespace.assert("http.createParameter"));
function halt(name) {
    throw new Error("Error on typia.http.".concat(name, "(): no transform has been configured. Read and follow https://typia.misc.io/docs/setup please."));
}
//# sourceMappingURL=http.js.map