"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createValidateSnake = exports.createIsSnake = exports.createAssertSnake = exports.createSnake = exports.createValidatePascal = exports.createIsPascal = exports.createAssertPascal = exports.createPascal = exports.createValidateCamel = exports.createIsCamel = exports.createAssertCamel = exports.createCamel = exports.validateSnake = exports.isSnake = exports.assertSnake = exports.snake = exports.validatePascal = exports.isPascal = exports.assertPascal = exports.pascal = exports.validateCamel = exports.isCamel = exports.assertCamel = exports.camel = void 0;
var Namespace_1 = require("./functional/Namespace");
function camel() {
    return halt("camel");
}
exports.camel = camel;
Object.assign(camel, Namespace_1.Namespace.notations.camel("camel"));
function assertCamel() {
    return halt("assertCamel");
}
exports.assertCamel = assertCamel;
Object.assign(assertCamel, Namespace_1.Namespace.notations.camel("assertCamel"));
Object.assign(assertCamel, Namespace_1.Namespace.assert("notations.assertCamel"));
function isCamel() {
    return halt("isCamel");
}
exports.isCamel = isCamel;
Object.assign(isCamel, Namespace_1.Namespace.notations.camel("isCamel"));
Object.assign(isCamel, Namespace_1.Namespace.is());
function validateCamel() {
    return halt("validateCamel");
}
exports.validateCamel = validateCamel;
Object.assign(validateCamel, Namespace_1.Namespace.notations.camel("validateCamel"));
Object.assign(validateCamel, Namespace_1.Namespace.validate());
function pascal() {
    return halt("pascal");
}
exports.pascal = pascal;
Object.assign(pascal, Namespace_1.Namespace.notations.pascal("pascal"));
function assertPascal() {
    return halt("assertPascal");
}
exports.assertPascal = assertPascal;
Object.assign(assertPascal, Namespace_1.Namespace.notations.pascal("assertPascal"));
Object.assign(assertPascal, Namespace_1.Namespace.assert("notations.assertPascal"));
function isPascal() {
    return halt("isPascal");
}
exports.isPascal = isPascal;
Object.assign(isPascal, Namespace_1.Namespace.notations.pascal("isPascal"));
Object.assign(isPascal, Namespace_1.Namespace.is());
function validatePascal() {
    return halt("validatePascal");
}
exports.validatePascal = validatePascal;
Object.assign(validatePascal, Namespace_1.Namespace.notations.pascal("validatePascal"));
Object.assign(validatePascal, Namespace_1.Namespace.validate());
function snake() {
    return halt("snake");
}
exports.snake = snake;
Object.assign(snake, Namespace_1.Namespace.notations.snake("snake"));
function assertSnake() {
    return halt("assertSnake");
}
exports.assertSnake = assertSnake;
Object.assign(assertSnake, Namespace_1.Namespace.notations.snake("assertSnake"));
Object.assign(assertSnake, Namespace_1.Namespace.assert("notations.assertSnake"));
function isSnake() {
    return halt("isSnake");
}
exports.isSnake = isSnake;
Object.assign(isSnake, Namespace_1.Namespace.notations.snake("isSnake"));
Object.assign(isSnake, Namespace_1.Namespace.is());
function validateSnake() {
    return halt("validateSnake");
}
exports.validateSnake = validateSnake;
Object.assign(validateSnake, Namespace_1.Namespace.notations.snake("validateSnake"));
Object.assign(validateSnake, Namespace_1.Namespace.validate());
function createCamel() {
    halt("createCamel");
}
exports.createCamel = createCamel;
Object.assign(createCamel, Namespace_1.Namespace.notations.camel("createCamel"));
function createAssertCamel() {
    halt("createAssertCamel");
}
exports.createAssertCamel = createAssertCamel;
Object.assign(createAssertCamel, Namespace_1.Namespace.notations.camel("createAssertCamel"));
Object.assign(createAssertCamel, Namespace_1.Namespace.assert("notations.createAssertCamel"));
function createIsCamel() {
    halt("createIsCamel");
}
exports.createIsCamel = createIsCamel;
Object.assign(createIsCamel, Namespace_1.Namespace.notations.camel("createIsCamel"));
Object.assign(createIsCamel, Namespace_1.Namespace.is());
function createValidateCamel() {
    halt("createValidateCamel");
}
exports.createValidateCamel = createValidateCamel;
Object.assign(createValidateCamel, Namespace_1.Namespace.notations.camel("createValidateCamel"));
Object.assign(createValidateCamel, Namespace_1.Namespace.validate());
function createPascal() {
    halt("createPascal");
}
exports.createPascal = createPascal;
Object.assign(createPascal, Namespace_1.Namespace.notations.pascal("createPascal"));
function createAssertPascal() {
    halt("createAssertPascal");
}
exports.createAssertPascal = createAssertPascal;
Object.assign(createAssertPascal, Namespace_1.Namespace.notations.pascal("createAssertPascal"));
Object.assign(createAssertPascal, Namespace_1.Namespace.assert("notations.createAssertPascal"));
function createIsPascal() {
    halt("createIsPascal");
}
exports.createIsPascal = createIsPascal;
Object.assign(createIsPascal, Namespace_1.Namespace.notations.pascal("createIsPascal"));
Object.assign(createIsPascal, Namespace_1.Namespace.is());
function createValidatePascal() {
    halt("createValidatePascal");
}
exports.createValidatePascal = createValidatePascal;
Object.assign(createValidatePascal, Namespace_1.Namespace.notations.pascal("createValidatePascal"));
Object.assign(createValidatePascal, Namespace_1.Namespace.validate());
function createSnake() {
    halt("createSnake");
}
exports.createSnake = createSnake;
Object.assign(createSnake, Namespace_1.Namespace.notations.snake("createSnake"));
function createAssertSnake() {
    halt("createAssertSnake");
}
exports.createAssertSnake = createAssertSnake;
Object.assign(createAssertSnake, Namespace_1.Namespace.notations.snake("createAssertSnake"));
Object.assign(createAssertSnake, Namespace_1.Namespace.assert("notations.createAssertSnake"));
function createIsSnake() {
    halt("createIsSnake");
}
exports.createIsSnake = createIsSnake;
Object.assign(createIsSnake, Namespace_1.Namespace.notations.snake("createIsSnake"));
Object.assign(createIsSnake, Namespace_1.Namespace.is());
function createValidateSnake() {
    halt("createValidateSnake");
}
exports.createValidateSnake = createValidateSnake;
Object.assign(createValidateSnake, Namespace_1.Namespace.notations.snake("createValidateSnake"));
Object.assign(createValidateSnake, Namespace_1.Namespace.validate());
function halt(name) {
    throw new Error("Error on typia.notations.".concat(name, "(): no transform has been configured. Read and follow https://typia.io/docs/setup please."));
}
//# sourceMappingURL=notations.js.map