"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_schema = void 0;
var MetadataAtomic_1 = require("../../schemas/metadata/MetadataAtomic");
var AtomicPredicator_1 = require("../helpers/AtomicPredicator");
var application_alias_1 = require("./application_alias");
var application_array_1 = require("./application_array");
var application_boolean_1 = require("./application_boolean");
var application_constant_1 = require("./application_constant");
var application_escaped_1 = require("./application_escaped");
var application_native_1 = require("./application_native");
var application_number_1 = require("./application_number");
var application_object_1 = require("./application_object");
var application_string_1 = require("./application_string");
var application_templates_1 = require("./application_templates");
var application_tuple_1 = require("./application_tuple");
var application_schema = function (options) {
    return function (blockNever) {
        return function (components) {
            return function (meta) {
                return function (attribute) {
                    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g;
                    if (meta.any === true)
                        return __assign(__assign({}, attribute), { type: undefined });
                    else if (meta.nullable && meta.empty())
                        return __assign({ type: "null" }, attribute);
                    var union = [];
                    if (meta.nullable && options.purpose !== "swagger")
                        union.push(__assign(__assign({}, attribute), { type: "null" }));
                    var insert = meta.nullable && options.purpose === "swagger"
                        ? function (s) {
                            return union.push(__assign(__assign({}, s), { nullable: s.type
                                    ? true
                                    : undefined }));
                        }
                        : function (schema) { return union.push(schema); };
                    if (meta.escaped !== null)
                        union.push.apply(union, __spreadArray([], __read((0, application_escaped_1.application_escaped)(options)(blockNever)(components)(meta.escaped)(attribute)), false));
                    if (meta.templates.length && AtomicPredicator_1.AtomicPredicator.template(meta))
                        insert((0, application_templates_1.application_templates)(meta)(attribute));
                    try {
                        for (var _h = __values(meta.constants), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var constant = _j.value;
                            if (constant.type === "bigint")
                                throw new TypeError(NO_BIGINT);
                            else if ((constant.type === "string" && meta.templates.length) ||
                                AtomicPredicator_1.AtomicPredicator.constant(meta)(constant.type) === false)
                                continue;
                            else
                                insert((0, application_constant_1.application_constant)(constant)(attribute));
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    try {
                        for (var _k = __values(meta.atomics), _l = _k.next(); !_l.done; _l = _k.next()) {
                            var a = _l.value;
                            if (a.type === "bigint")
                                throw new TypeError(NO_BIGINT);
                            else if (a.type === "boolean")
                                (0, application_boolean_1.application_boolean)(a)(attribute).forEach(insert);
                            else if (a.type === "number")
                                (0, application_number_1.application_number)(a)(attribute).forEach(insert);
                            else if (a.type === "string")
                                (0, application_string_1.application_string)(meta)(a)(attribute).forEach(insert);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    try {
                        for (var _m = __values(meta.arrays), _o = _m.next(); !_o.done; _o = _m.next()) {
                            var array = _o.value;
                            (0, application_array_1.application_array)(options)(components)(array)(attribute).forEach(function (s) { return insert(s); });
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    try {
                        for (var _p = __values(meta.tuples), _q = _p.next(); !_q.done; _q = _p.next()) {
                            var tuple = _q.value;
                            insert((0, application_tuple_1.application_tuple)(options)(components)(tuple)(attribute));
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    var _loop_1 = function (native) {
                        if (AtomicPredicator_1.AtomicPredicator.native(native)) {
                            var type_1 = native.toLowerCase();
                            if (meta.atomics.some(function (a) { return a.type === type_1; }))
                                return "continue";
                            else if (type_1 === "bigint")
                                throw new TypeError(NO_BIGINT);
                            else if (type_1 === "boolean")
                                insert((0, application_boolean_1.application_boolean)(MetadataAtomic_1.MetadataAtomic.create({
                                    type: "boolean",
                                    tags: [],
                                }))(attribute)[0]);
                            else if (type_1 === "number")
                                insert((0, application_number_1.application_number)(MetadataAtomic_1.MetadataAtomic.create({
                                    type: "number",
                                    tags: [],
                                }))(attribute)[0]);
                            else if (type_1 === "string")
                                insert((0, application_string_1.application_string)(meta)(MetadataAtomic_1.MetadataAtomic.create({
                                    type: "string",
                                    tags: [],
                                }))(attribute)[0]);
                        }
                        else
                            insert((0, application_native_1.application_native)(options)(components)(native)({
                                nullable: meta.nullable,
                                attribute: attribute,
                            }));
                    };
                    try {
                        for (var _r = __values(meta.natives), _s = _r.next(); !_s.done; _s = _r.next()) {
                            var native = _s.value;
                            _loop_1(native);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    if (meta.sets.length)
                        insert((0, application_native_1.application_native)(options)(components)("Set")({
                            nullable: meta.nullable,
                            attribute: attribute,
                        }));
                    if (meta.maps.length)
                        insert((0, application_native_1.application_native)(options)(components)("Map")({
                            nullable: meta.nullable,
                            attribute: attribute,
                        }));
                    try {
                        for (var _t = __values(meta.objects), _u = _t.next(); !_u.done; _u = _t.next()) {
                            var obj = _u.value;
                            insert((0, application_object_1.application_object)(options)(components)(obj)(meta.nullable));
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    try {
                        for (var _v = __values(meta.aliases), _w = _v.next(); !_w.done; _w = _v.next()) {
                            var alias = _w.value;
                            insert((0, application_alias_1.application_alias)(options)(blockNever)(components)(alias)(meta.nullable));
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (_w && !_w.done && (_g = _v.return)) _g.call(_v);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                    if (union.length === 0)
                        return blockNever === true
                            ? null
                            : __assign(__assign({}, attribute), { type: undefined });
                    else if (union.length === 1)
                        return union[0];
                    return __assign({ oneOf: union }, attribute);
                };
            };
        };
    };
};
exports.application_schema = application_schema;
var NO_BIGINT = "Error on typia.application(): does not allow bigint type.";
//# sourceMappingURL=application_schema.js.map