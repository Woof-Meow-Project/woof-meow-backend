"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtobufAssertDecodeProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var StatementFactory_1 = require("../../factories/StatementFactory");
var TypeFactory_1 = require("../../factories/TypeFactory");
var AssertProgrammer_1 = require("../AssertProgrammer");
var ProtobufDecodeProgrammer_1 = require("./ProtobufDecodeProgrammer");
var ProtobufAssertDecodeProgrammer;
(function (ProtobufAssertDecodeProgrammer) {
    ProtobufAssertDecodeProgrammer.write = function (project) {
        return function (modulo) {
            return function (type, name) {
                return typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                    IdentifierFactory_1.IdentifierFactory.parameter("input", typescript_1.default.factory.createTypeReferenceNode("Uint8Array")),
                ], typescript_1.default.factory.createTypeReferenceNode("typia.Resolved<".concat(name !== null && name !== void 0 ? name : TypeFactory_1.TypeFactory.getFullName(project.checker)(type), ">")), undefined, typescript_1.default.factory.createBlock([
                    StatementFactory_1.StatementFactory.constant("decode", ProtobufDecodeProgrammer_1.ProtobufDecodeProgrammer.write(__assign(__assign({}, project), { options: __assign(__assign({}, project.options), { functional: false, numeric: false }) }))(modulo)(type, name)),
                    StatementFactory_1.StatementFactory.constant("assert", AssertProgrammer_1.AssertProgrammer.write(__assign(__assign({}, project), { options: __assign(__assign({}, project.options), { functional: false, numeric: false }) }))(modulo)(false)(type, name)),
                    StatementFactory_1.StatementFactory.constant("output", typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("decode"), undefined, [typescript_1.default.factory.createIdentifier("input")])),
                    typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createAsExpression(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("assert"), undefined, [typescript_1.default.factory.createIdentifier("output")]), TypeFactory_1.TypeFactory.keyword("any"))),
                ]));
            };
        };
    };
})(ProtobufAssertDecodeProgrammer || (exports.ProtobufAssertDecodeProgrammer = ProtobufAssertDecodeProgrammer = {}));
//# sourceMappingURL=ProtobufAssertDecodeProgrammer.js.map