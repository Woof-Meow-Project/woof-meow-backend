"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamingConvention = void 0;
var StringUtil_1 = require("./StringUtil");
var NamingConvention;
(function (NamingConvention) {
    function snake(str) {
        var indexes = [];
        for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            if (65 <= code && code <= 90)
                indexes.push(i);
        }
        for (var i = indexes.length - 1; i > 0; --i) {
            var now = indexes[i];
            var prev = indexes[i - 1];
            if (now - prev === 1)
                indexes.splice(i, 1);
        }
        if (indexes.length !== 0 && indexes[0] === 0)
            indexes.splice(0, 1);
        if (indexes.length === 0)
            return str.toLowerCase();
        var ret = "";
        for (var i = 0; i < indexes.length; i++) {
            var first = i === 0 ? 0 : indexes[i - 1];
            var last = indexes[i];
            ret += str.substring(first, last).toLowerCase();
            ret += "_";
        }
        ret += str.substring(indexes[indexes.length - 1]).toLowerCase();
        return ret;
    }
    NamingConvention.snake = snake;
    function camel(str) {
        str = removeSnake(str);
        if (str.length === 0)
            return str;
        else if (str[0] === str[0].toUpperCase())
            return str[0].toLowerCase() + str.substring(1);
        else if (str[0] === "_" &&
            str.length > 1 &&
            str[1] === str[1].toLowerCase())
            return "_" + str[1].toUpperCase() + str.substring(2);
        else
            return str;
    }
    NamingConvention.camel = camel;
    function pascal(str) {
        str = removeSnake(str);
        if (str.length === 0)
            return str;
        else if (str[0] === str[0].toLowerCase())
            return str[0].toUpperCase() + str.substring(1);
        else if (str[0] === "_" &&
            str.length > 1 &&
            str[1] === str[1].toLowerCase())
            return "_" + str[1].toUpperCase() + str.substring(2);
        else
            return str;
    }
    NamingConvention.pascal = pascal;
    var removeSnake = function (str) {
        var indexes = [];
        for (var i = 0; i < str.length; i++) {
            var ch = str[i];
            if (ch !== "_")
                continue;
            var last_1 = indexes[indexes.length - 1];
            if (last_1 === undefined || last_1[0] + last_1[1] !== i)
                indexes.push([i, 1]);
            else
                ++last_1[1];
        }
        if (indexes.length === 0)
            return str;
        var ret = "";
        for (var i = 0; i < indexes.length; i++) {
            var _a = __read(indexes[i], 1), first = _a[0];
            if (i === 0)
                if (first === 0)
                    ret += "_";
                else
                    ret += str.substring(0, first);
            else {
                var _b = __read(indexes[i - 1], 2), prevFirst = _b[0], prevLength = _b[1];
                var piece_1 = str.substring(prevFirst + prevLength, first);
                if (piece_1.length)
                    ret += StringUtil_1.StringUtil.capitalize(piece_1);
            }
        }
        var last = indexes[indexes.length - 1];
        var piece = str.substring(last[0] + last[1]);
        if (last.length)
            ret += StringUtil_1.StringUtil.capitalize(piece);
        return ret;
    };
})(NamingConvention || (exports.NamingConvention = NamingConvention = {}));
//# sourceMappingURL=NamingConvention.js.map