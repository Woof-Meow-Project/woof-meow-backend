/**
 * Dynamic Executor running prefixed functions.
 *
 * `DynamicExecutor` runs every prefixed functions in a specific directory.
 * However, if you want to run only specific functions, you can use
 * `--include` or `--exclude` option in the CLI (Command Line Interface) level.
 *
 * When you want to see example utilization cases, see the below example links.
 *
 * @example https://github.com/samchon/nestia-template/blob/master/src/test/index.ts
 * @example https://github.com/samchon/backend/blob/master/src/test/index.ts
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare namespace DynamicExecutor {
    /**
     * Function type of a prefixed.
     *
     * @template Arguments Type of parameters
     * @template Ret Type of return value
     */
    interface Closure<Arguments extends any[], Ret = any> {
        (...args: Arguments): Promise<Ret>;
    }
    /**
     * Options for dynamic executor.
     */
    interface IOptions<Parameters extends any[], Ret = any> {
        /**
         * Prefix of function name.
         *
         * Every prefixed function will be executed.
         *
         * In other words, if a function name doesn't start with the prefix, then it would never be executed.
         */
        prefix: string;
        /**
         * Get parameters of a function.
         *
         * @param name Function name
         * @returns Parameters
         */
        parameters: (name: string) => Parameters;
        /**
         * Filter function whether to run or not.
         *
         * @param name Function name
         * @returns Whether to run or not
         */
        filter?: (name: string) => boolean;
        /**
         * Wrapper of test function.
         *
         * If you specify this `wrapper` property,  every dynamic functions
         * loaded and called by this `DynamicExecutor` would be wrapped by
         * the `wrapper` function.
         *
         * @param name Function name
         * @param closure Function to be executed
         * @returns Wrapper function
         */
        wrapper?: (name: string, closure: Closure<Parameters, Ret>) => Promise<any>;
        /**
         * Whether to show elapsed time on `console` or not.
         *
         * @default true
         */
        showElapsedTime?: boolean;
        /**
         * Extension of dynamic functions.
         *
         * @default js
         */
        extension?: string;
    }
    /**
     * Report, result of dynamic execution.
     */
    interface IReport {
        /**
         * Location path of dynamic functions.
         */
        location: string;
        /**
         * Execution results of dynamic functions.
         */
        executions: IReport.IExecution[];
        /**
         * Total elapsed time.
         */
        time: number;
    }
    namespace IReport {
        /**
         * Execution result of a dynamic function.
         */
        interface IExecution {
            /**
             * Name of function.
             */
            name: string;
            /**
             * Location path of the function.
             */
            location: string;
            /**
             * Error when occured.
             */
            error: Error | null;
            /**
             * Elapsed time.
             */
            time: number;
        }
    }
    /**
     * Prepare dynamic executor in strict mode.
     *
     * In strict mode, if any error occurs, the program will be terminated directly.
     * Otherwise, {@link validate} mode does not terminate when error occurs, but
     * just archive the error log.
     *
     * @param options Options of dynamic executor
     * @returns Runner of dynamic functions with specific location
     */
    const assert: <Arguments extends any[]>(options: IOptions<Arguments, any>) => (path: string) => Promise<IReport>;
    /**
     * Prepare dynamic executor in loose mode.
     *
     * In loose mode, the program would not be terminated even when error occurs.
     * Instead, the error would be archived and returns as a list. Otherwise,
     * {@link assert} mode terminates the program directly when error occurs.
     *
     * @param options Options of dynamic executor
     * @returns Runner of dynamic functions with specific location
     */
    const validate: <Arguments extends any[]>(options: IOptions<Arguments, any>) => (path: string) => Promise<IReport>;
}
