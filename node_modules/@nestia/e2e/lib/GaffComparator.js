"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaffComparator = void 0;
/**
 * Gaff comparator.
 *
 * `GaffComparator` is a set of comparator functions for `Array.sort()` function,
 * which can be used with {@link TestValidator.sort} function. If you want to see
 * how to use them, see the below example link.
 *
 * @example https://github.com/samchon/nestia-template/blob/master/src/test/features/api/bbs/test_api_bbs_article_index_sort.ts
 * @author Jeongho Nam - https://github.com/samchon
 */
var GaffComparator;
(function (GaffComparator) {
    /**
     * String(s) comparator.
     *
     * @param getter Getter of string(s) from input
     * @returns Comparator function
     */
    GaffComparator.strings = function (getter) {
        return function (x, y) {
            var a = wrap(getter(x));
            var b = wrap(getter(y));
            var idx = a.findIndex(function (v, i) { return v !== b[i]; });
            return idx !== -1 ? compare(a[idx], b[idx]) : 0;
        };
    };
    /**
     * Date(s) comparator.
     *
     * @param getter Getter of date(s) from input
     * @returns Comparator function
     */
    GaffComparator.dates = function (getter) {
        return function (x, y) {
            var take = function (v) {
                return wrap(getter(v)).map(function (str) { return new Date(str).getTime(); });
            };
            var a = take(x);
            var b = take(y);
            var idx = a.findIndex(function (v, i) { return v !== b[i]; });
            return idx !== -1 ? a[idx] - b[idx] : 0;
        };
    };
    /**
     * Number(s) comparator.
     *
     * @param closure Getter of number(s) from input
     * @returns Comparator function
     */
    GaffComparator.numbers = function (closure) {
        return function (x, y) {
            var a = wrap(closure(x));
            var b = wrap(closure(y));
            var idx = a.findIndex(function (v, i) { return v !== b[i]; });
            return idx !== -1 ? a[idx] - b[idx] : 0;
        };
    };
    function compare(x, y) {
        return x.localeCompare(y);
    }
    function wrap(elem) {
        return Array.isArray(elem) ? elem : [elem];
    }
})(GaffComparator || (exports.GaffComparator = GaffComparator = {}));
//# sourceMappingURL=GaffComparator.js.map