/**
 * Random data generator.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare namespace RandomGenerator {
    /**
     * Generate random alphabets
     *
     * @param length Length of alphabets
     * @returns Generated alphabets
     */
    const alphabets: (length: number) => string;
    /**
     * Generate random alpha-numeric characters.
     *
     * Generate random string constructed with only alphabets and numbers.
     *
     * @param length Length of characters
     * @returns Generated string
     */
    const alphaNumeric: (length: number) => string;
    /**
     * Generate random name.
     *
     * @param length Length of paragraph, default is 2 or 3
     * @returns Generated name
     */
    const name: (length?: number) => string;
    /**
     * Generate random paragraph.
     *
     * @param sentences Number of sentences
     * @returns Paragraph generator
     */
    const paragraph: (sentences?: number) => (wordMin?: number, wordMax?: number) => string;
    /**
     * Generate random content.
     *
     * @param paragraphes Number of paragraphes
     * @returns Currying function
     */
    const content: (paragraphes?: number) => (sentenceMin?: number, sentenceMax?: number) => (wordMin?: number, wordMax?: number) => string;
    /**
     * Generate random substring.
     *
     * @param content Target content
     * @returns Random substring
     */
    const substring: (content: string) => string;
    /**
     * Generate random mobile number.
     *
     * @param prefix Prefix string, default is "010"
     * @returns Random mobile number
     * @example 0103340067
     */
    const mobile: (prefix?: string) => string;
    /**
     * Generate random date.
     *
     * @param from Start date
     * @param range Range of random milliseconds
     * @returns Random date
     */
    const date: (from: Date) => (range: number) => Date;
    /**
     * Pick random elements from an array.
     *
     * @param array Target array
     * @param count Number of count to pick
     * @returns Sampled array
     */
    const sample: <T>(array: T[]) => (count: number) => T[];
    /**
     * Pick random element from an array.
     *
     * @param array Target array
     * @returns picked element
     */
    const pick: <T>(array: T[]) => T;
}
