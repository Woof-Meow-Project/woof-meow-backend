"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomGenerator = void 0;
var tstl_1 = require("tstl");
var ranges_1 = require("tstl/ranges");
/**
 * Random data generator.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
var RandomGenerator;
(function (RandomGenerator) {
    /* ----------------------------------------------------------------
        IDENTIFICATIONS
    ---------------------------------------------------------------- */
    var CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    var LETTERS = "0123456789" + CHARACTERS;
    /**
     * Generate random alphabets
     *
     * @param length Length of alphabets
     * @returns Generated alphabets
     */
    RandomGenerator.alphabets = function (length) {
        return new Array(length)
            .fill("")
            .map(function () { return CHARACTERS[(0, tstl_1.randint)(0, CHARACTERS.length - 1)]; })
            .join("");
    };
    /**
     * Generate random alpha-numeric characters.
     *
     * Generate random string constructed with only alphabets and numbers.
     *
     * @param length Length of characters
     * @returns Generated string
     */
    RandomGenerator.alphaNumeric = function (length) {
        return new Array(length)
            .fill("")
            .map(function () { return LETTERS[(0, tstl_1.randint)(0, LETTERS.length - 1)]; })
            .join("");
    };
    /**
     * Generate random name.
     *
     * @param length Length of paragraph, default is 2 or 3
     * @returns Generated name
     */
    RandomGenerator.name = function (length) {
        if (length === void 0) { length = (0, tstl_1.randint)(2, 3); }
        return RandomGenerator.paragraph(length)();
    };
    /**
     * Generate random paragraph.
     *
     * @param sentences Number of sentences
     * @returns Paragraph generator
     */
    RandomGenerator.paragraph = function (sentences) {
        if (sentences === void 0) { sentences = (0, tstl_1.randint)(2, 5); }
        /**
         * @param wordMin Minimum number of characters in a sentence
         * @param wordMax Maximum number of characters in a sentence
         * @returns Generated paragraph
         */
        return function (wordMin, wordMax) {
            if (wordMin === void 0) { wordMin = 3; }
            if (wordMax === void 0) { wordMax = 7; }
            return new Array(sentences)
                .fill("")
                .map(function () { return RandomGenerator.alphabets((0, tstl_1.randint)(wordMin, wordMax)); })
                .join(" ");
        };
    };
    /**
     * Generate random content.
     *
     * @param paragraphes Number of paragraphes
     * @returns Currying function
     */
    RandomGenerator.content = function (paragraphes) {
        if (paragraphes === void 0) { paragraphes = (0, tstl_1.randint)(3, 8); }
        /**
         * @param sentenceMin Minimum number of sentences in a paragraph
         * @param sentenceMax Maximum number of sentences in a paragraph
         * @returns Currying function
         */
        return function (sentenceMin, sentenceMax) {
            if (sentenceMin === void 0) { sentenceMin = 10; }
            if (sentenceMax === void 0) { sentenceMax = 40; }
            /**
             * @param wordMin Minimum number of characters in a sentence
             * @param wordMax Maximum number of characters in a sentence
             * @returns Content generator
             */
            return function (wordMin, wordMax) {
                if (wordMin === void 0) { wordMin = 1; }
                if (wordMax === void 0) { wordMax = 7; }
                return new Array(paragraphes)
                    .fill("")
                    .map(function () {
                    return RandomGenerator.paragraph((0, tstl_1.randint)(sentenceMin, sentenceMax))(wordMin, wordMax);
                })
                    .join("\n\n");
            };
        };
    };
    /**
     * Generate random substring.
     *
     * @param content Target content
     * @returns Random substring
     */
    RandomGenerator.substring = function (content) {
        var first = (0, tstl_1.randint)(0, content.length - 1);
        var last = (0, tstl_1.randint)(first + 1, content.length);
        return content.substring(first, last).trim();
    };
    /**
     * Generate random mobile number.
     *
     * @param prefix Prefix string, default is "010"
     * @returns Random mobile number
     * @example 0103340067
     */
    RandomGenerator.mobile = function (prefix) {
        if (prefix === void 0) { prefix = "010"; }
        return [
            prefix,
            (function () {
                var value = (0, tstl_1.randint)(0, 9999);
                return value.toString().padStart(value < 1000 ? 3 : 4, "0");
            })(),
            (0, tstl_1.randint)(0, 9999).toString().padStart(4, "0"),
        ].join("");
    };
    /**
     * Generate random date.
     *
     * @param from Start date
     * @param range Range of random milliseconds
     * @returns Random date
     */
    RandomGenerator.date = function (from) {
        return function (range) {
            return new Date(from.getTime() + (0, tstl_1.randint)(0, range));
        };
    };
    /**
     * Pick random elements from an array.
     *
     * @param array Target array
     * @param count Number of count to pick
     * @returns Sampled array
     */
    RandomGenerator.sample = function (array) {
        return function (count) {
            var ret = [];
            (0, ranges_1.sample)(array, (0, tstl_1.back_inserter)(ret), count);
            return ret;
        };
    };
    /**
     * Pick random element from an array.
     *
     * @param array Target array
     * @returns picked element
     */
    RandomGenerator.pick = function (array) {
        return array[(0, tstl_1.randint)(0, array.length - 1)];
    };
})(RandomGenerator || (exports.RandomGenerator = RandomGenerator = {}));
//# sourceMappingURL=RandomGenerator.js.map