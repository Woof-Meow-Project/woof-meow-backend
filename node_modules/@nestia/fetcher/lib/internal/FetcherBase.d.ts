import { IConnection } from "../IConnection";
import { Primitive } from "../Primitive";
import { IFetchRoute } from "./IFetchRoute";
import { IPropagation } from "../IPropagation";
export declare namespace FetcherBase {
    interface IProps {
        className: string;
        encode: (input: any, headers: Record<string, IConnection.HeaderValue | undefined>) => string;
        decode: (input: string, headers: Record<string, IConnection.HeaderValue | undefined>) => any;
    }
    const fetch: (props: IProps) => <Input, Output>(connection: IConnection, route: IFetchRoute<"DELETE" | "GET" | "HEAD" | "PATCH" | "POST" | "PUT">, input?: Input | undefined, stringify?: ((input: Input) => string) | undefined) => Promise<Primitive<Output>>;
    const propagate: (props: IProps) => <Input>(connection: IConnection, route: IFetchRoute<"DELETE" | "GET" | "HEAD" | "PATCH" | "POST" | "PUT">, input?: Input | undefined, stringify?: ((input: Input) => string) | undefined) => Promise<IPropagation<any, any>>;
}
