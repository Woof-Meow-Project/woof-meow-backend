"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetcherBase = void 0;
var import2_1 = __importDefault(require("import2"));
var Singleton_1 = require("./Singleton");
var HttpError_1 = require("../HttpError");
var FetcherBase;
(function (FetcherBase) {
    var _this = this;
    FetcherBase.fetch = function (props) {
        return function (connection, route, input, stringify) { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _Propagate("fetch")(props)(connection, route, input, stringify)];
                    case 1:
                        result = _a.sent();
                        if (result.success === false)
                            throw new HttpError_1.HttpError(route.method, route.path, result.status, result.headers, result.data);
                        return [2 /*return*/, result.data];
                }
            });
        }); };
    };
    FetcherBase.propagate = function (props) {
        return function (connection, route, input, stringify) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, _Propagate("propagate")(props)(connection, route, input, stringify)];
        }); }); };
    };
    /**
     * @internal
     */
    var _Propagate = function (method) {
        return function (props) {
            return function (connection, route, input, stringify) { return __awaiter(_this, void 0, void 0, function () {
                var headers, init, path, url, response, result, _a, type, text, _b, _c, _d;
                var _e, _f, _g, _h, _j;
                return __generator(this, function (_k) {
                    switch (_k.label) {
                        case 0:
                            headers = __assign({}, ((_e = connection.headers) !== null && _e !== void 0 ? _e : {}));
                            if (input !== undefined) {
                                if (((_f = route.request) === null || _f === void 0 ? void 0 : _f.type) === undefined)
                                    throw new Error("Error on ".concat(props.className, ".fetch(): no content-type being configured."));
                                headers["Content-Type"] = route.request.type;
                            }
                            init = __assign(__assign({}, ((_g = connection.options) !== null && _g !== void 0 ? _g : {})), { method: route.method, headers: (function () {
                                    var e_1, _a, e_2, _b;
                                    var output = [];
                                    try {
                                        for (var _c = __values(Object.entries(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                            var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                                            if (value === undefined)
                                                continue;
                                            else if (Array.isArray(value))
                                                try {
                                                    for (var value_1 = (e_2 = void 0, __values(value)), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                                                        var v = value_1_1.value;
                                                        output.push([key, String(v)]);
                                                    }
                                                }
                                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                                finally {
                                                    try {
                                                        if (value_1_1 && !value_1_1.done && (_b = value_1.return)) _b.call(value_1);
                                                    }
                                                    finally { if (e_2) throw e_2.error; }
                                                }
                                            else
                                                output.push([key, String(value)]);
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                    return output;
                                })() });
                            // CONSTRUCT BODY DATA
                            if (input !== undefined)
                                init.body = props.encode(
                                // BODY TRANSFORM
                                ((_h = route.request) === null || _h === void 0 ? void 0 : _h.type) !== "text/plain"
                                    ? (stringify !== null && stringify !== void 0 ? stringify : JSON.stringify)(input)
                                    : input, headers);
                            path = connection.host[connection.host.length - 1] !== "/" &&
                                route.path[0] !== "/"
                                ? "/".concat(route.path)
                                : route.path;
                            url = new URL("".concat(connection.host).concat(path));
                            return [4 /*yield*/, polyfill.get()];
                        case 1: return [4 /*yield*/, (_k.sent())(url.href, init)];
                        case 2:
                            response = _k.sent();
                            result = {
                                success: response.status === 200 ||
                                    response.status === 201 ||
                                    response.status == route.status,
                                status: response.status,
                                headers: response_headers_to_object(response.headers),
                                data: undefined,
                            };
                            if (!(result.success === false)) return [3 /*break*/, 4];
                            // WHEN FAILED
                            _a = result;
                            return [4 /*yield*/, response.text()];
                        case 3:
                            // WHEN FAILED
                            _a.data = _k.sent();
                            type = response.headers.get("content-type");
                            if (method !== "fetch" &&
                                type &&
                                type.indexOf("application/json") !== -1)
                                try {
                                    result.data = JSON.parse(result.data);
                                }
                                catch (_l) { }
                            return [3 /*break*/, 9];
                        case 4:
                            if (!(route.method === "HEAD")) return [3 /*break*/, 5];
                            result.data = undefined;
                            return [3 /*break*/, 9];
                        case 5:
                            if (!(((_j = route.response) === null || _j === void 0 ? void 0 : _j.type) === "application/json")) return [3 /*break*/, 7];
                            return [4 /*yield*/, response.text()];
                        case 6:
                            text = _k.sent();
                            result.data = text.length ? JSON.parse(text) : undefined;
                            return [3 /*break*/, 9];
                        case 7:
                            _b = result;
                            _d = (_c = props).decode;
                            return [4 /*yield*/, response.text()];
                        case 8:
                            _b.data = _d.apply(_c, [_k.sent(), result.headers]);
                            _k.label = 9;
                        case 9: return [2 /*return*/, result];
                    }
                });
            }); };
        };
    };
})(FetcherBase || (exports.FetcherBase = FetcherBase = {}));
/**
 * @internal
 */
var polyfill = new Singleton_1.Singleton(function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, _b;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (!(typeof global === "object" &&
                    typeof global.process === "object" &&
                    typeof global.process.versions === "object" &&
                    typeof global.process.versions.node !== undefined)) return [3 /*break*/, 5];
                if (!(global.fetch === undefined)) return [3 /*break*/, 4];
                if (!((_c = global.fetch) !== null && _c !== void 0)) return [3 /*break*/, 1];
                _a = _c;
                return [3 /*break*/, 3];
            case 1:
                _b = global;
                return [4 /*yield*/, (0, import2_1.default)("node-fetch")];
            case 2:
                _a = (_b.fetch = (_d.sent()).default);
                _d.label = 3;
            case 3:
                _a;
                _d.label = 4;
            case 4: return [2 /*return*/, global.fetch];
            case 5: return [2 /*return*/, window.fetch];
        }
    });
}); });
/**
 * @internal
 */
var response_headers_to_object = function (headers) {
    var output = {};
    headers.forEach(function (value, key) {
        var _a;
        var _b;
        if (key === "set-cookie") {
            (_b = output[key]) !== null && _b !== void 0 ? _b : (output[key] = []);
            (_a = output[key]).push.apply(_a, __spreadArray([], __read(value.split(";").map(function (str) { return str.trim(); })), false));
        }
        else
            output[key] = value;
    });
    return output;
};
//# sourceMappingURL=FetcherBase.js.map