"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAnalyzer = void 0;
const HashSet_1 = require("tstl/container/HashSet");
const typescript_1 = __importDefault(require("typescript"));
var ImportAnalyzer;
(function (ImportAnalyzer) {
    function analyze(checker, genericDict, importDict, type) {
        type = get_type(checker, type);
        explore_escaped_name(checker, genericDict, importDict, type);
        try {
            return {
                type,
                typeName: explore_escaped_name(checker, genericDict, importDict, type),
            };
        }
        catch (_a) {
            return null;
        }
    }
    ImportAnalyzer.analyze = analyze;
    /* ---------------------------------------------------------
        TYPE
    --------------------------------------------------------- */
    function get_type(checker, type) {
        const symbol = type.getSymbol();
        return symbol && get_name(symbol) === "Promise"
            ? escape_promise(checker, type)
            : type;
    }
    function escape_promise(checker, type) {
        const generic = checker.getTypeArguments(type);
        if (generic.length !== 1)
            throw new Error("Error on ImportAnalyzer.analyze(): invalid promise type.");
        return generic[0];
    }
    function get_name(symbol) {
        return explore_name(symbol.escapedName.toString(), symbol.getDeclarations()[0].parent);
    }
    /* ---------------------------------------------------------
        ESCAPED TEXT WITH IMPORT STATEMENTS
    --------------------------------------------------------- */
    function explore_escaped_name(checker, genericDict, importDict, type) {
        var _a;
        //----
        // CONDITIONAL BRANCHES
        //----
        // DECOMPOSE GENERIC ARGUMENT
        while (genericDict.has(type) === true)
            type = genericDict.get(type);
        // PRIMITIVE
        const symbol = (_a = type.aliasSymbol) !== null && _a !== void 0 ? _a : type.getSymbol();
        // UNION OR INTERSECT
        if (type.aliasSymbol === undefined && type.isUnionOrIntersection()) {
            const joiner = type.isIntersection() ? " & " : " | ";
            return type.types
                .map((child) => explore_escaped_name(checker, genericDict, importDict, child))
                .join(joiner);
        }
        // NO SYMBOL
        else if (symbol === undefined)
            return checker.typeToString(type, undefined, typescript_1.default.TypeFormatFlags.NoTruncation);
        //----
        // SPECIALIZATION
        //----
        const name = get_name(symbol);
        const sourceFile = symbol.declarations[0].getSourceFile();
        if (sourceFile.fileName.indexOf("typescript/lib") === -1) {
            const set = importDict.take(sourceFile.fileName, () => new HashSet_1.HashSet());
            set.insert(name.split(".")[0]);
        }
        // CHECK GENERIC
        const generic = type.aliasSymbol
            ? type.aliasTypeArguments || []
            : checker.getTypeArguments(type);
        return generic.length
            ? name === "Promise"
                ? explore_escaped_name(checker, genericDict, importDict, generic[0])
                : `${name}<${generic
                    .map((child) => explore_escaped_name(checker, genericDict, importDict, child))
                    .join(", ")}>`
            : name;
    }
    function explore_name(name, decl) {
        return typescript_1.default.isModuleBlock(decl)
            ? explore_name(`${decl.parent.name.getFullText().trim()}.${name}`, decl.parent.parent)
            : name;
    }
})(ImportAnalyzer || (exports.ImportAnalyzer = ImportAnalyzer = {}));
//# sourceMappingURL=ImportAnalyzer.js.map