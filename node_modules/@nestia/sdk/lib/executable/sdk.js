#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const CommandParser_1 = require("./internal/CommandParser");
const USAGE = `Wrong command has been detected. Use like below:

npx @nestia/sdk [command] [options?]

  1. npx @nestia/sdk dependencies --manager (npm|pnpm|yarn)
    - npx @nestia/sdk dependencies
    - npx @nestia/sdk dependencies --manager pnpm
  2. npx @nestia/sdk init
  3. npx @nestia/sdk sdk
  4. npx @nestia/sdk swagger
  5. npx @nestia/sdk e2e
`;
function halt(desc) {
    console.error(desc);
    process_1.default.exit(-1);
}
function dependencies(argv) {
    var _a;
    // INSTALL DEPENDENCIES
    const module = (_a = CommandParser_1.CommandParser.parse(argv).module) !== null && _a !== void 0 ? _a : "npm";
    const prefix = module === "yarn" ? "yarn add" : `${module} install`;
    for (const lib of ["@nestia/fetcher", "typia"]) {
        const command = `${prefix} ${lib}`;
        child_process_1.default.execSync(command, { stdio: "inherit" });
    }
}
function initialize() {
    return __awaiter(this, void 0, void 0, function* () {
        if (fs_1.default.existsSync("nestia.config.ts") === true)
            halt(`Error on nestia.sdk.initialize(): "nestia.config.ts" file already has been configured.`);
        yield fs_1.default.promises.copyFile(`${__dirname}/../../assets/config/nestia.config.ts`, "nestia.config.ts");
    });
}
function execute(closure) {
    return __awaiter(this, void 0, void 0, function* () {
        const module = yield Promise.resolve().then(() => __importStar(require("./internal/NestiaSdkCommand")));
        yield closure(module.NestiaSdkCommand);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const type = process_1.default.argv[2];
        const argv = process_1.default.argv.slice(3);
        if (type === "dependencies")
            dependencies(argv);
        else if (type === "init")
            yield initialize();
        else if (type === "sdk")
            yield execute((c) => c.sdk());
        else if (type === "swagger")
            yield execute((c) => c.swagger());
        else if (type === "e2e")
            yield execute((c) => c.e2e());
        else
            halt(USAGE);
    });
}
main().catch((exp) => {
    console.log(exp.message);
    process_1.default.exit(-1);
});
//# sourceMappingURL=sdk.js.map