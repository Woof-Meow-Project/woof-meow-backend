"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.E2eGenerator = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const NestiaConfigUtil_1 = require("../utils/NestiaConfigUtil");
const E2eFileProgrammer_1 = require("./internal/E2eFileProgrammer");
var E2eGenerator;
(function (E2eGenerator) {
    E2eGenerator.generate = (config) => (routeList) => __awaiter(this, void 0, void 0, function* () {
        console.log("Generating E2E Test Functions");
        // PREPARE DIRECTORIES
        const output = path_1.default.resolve(config.e2e);
        yield mkdir(output);
        yield mkdir(path_1.default.join(output, "features"));
        yield mkdir(path_1.default.join(output, "features", "api"));
        yield mkdir(path_1.default.join(output, "features", "api", "automated"));
        // GENERATE TEST INDEX FILE
        yield index(config)(path_1.default.join(config.e2e, "index.ts"));
        // GENERATE EACH TEST FILES
        for (const route of routeList)
            yield E2eFileProgrammer_1.E2eFileProgrammer.generate(config)({
                api: path_1.default.resolve(config.output),
                current: path_1.default.join(output, "features", "api", "automated"),
            })(route);
    });
    const index = (config) => (output) => __awaiter(this, void 0, void 0, function* () {
        if (fs_1.default.existsSync(output))
            return;
        const location = path_1.default.join(__dirname, "..", "..", "assets", "bundle", "e2e", "index.ts");
        const content = yield fs_1.default.promises.readFile(location, "utf8");
        yield fs_1.default.promises.writeFile(output, content.replace("${input}", JSON.stringify(NestiaConfigUtil_1.NestiaConfigUtil.input(config.input))), "utf8");
    });
})(E2eGenerator || (exports.E2eGenerator = E2eGenerator = {}));
const mkdir = (location) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield fs_1.default.promises.mkdir(location);
    }
    catch (_a) { }
});
//# sourceMappingURL=E2eGenerator.js.map