"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkGenerator = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const SdkDistributionComposer_1 = require("./internal/SdkDistributionComposer");
const SdkDtoGenerator_1 = require("./internal/SdkDtoGenerator");
const SdkFileProgrammer_1 = require("./internal/SdkFileProgrammer");
var SdkGenerator;
(function (SdkGenerator) {
    SdkGenerator.generate = (checker) => (config) => (routes) => __awaiter(this, void 0, void 0, function* () {
        console.log("Generating SDK Library");
        // PREPARE NEW DIRECTORIES
        try {
            yield fs_1.default.promises.mkdir(config.output);
        }
        catch (_a) { }
        // BUNDLING
        const bundle = yield fs_1.default.promises.readdir(SdkGenerator.BUNDLE_PATH);
        for (const file of bundle) {
            const current = `${SdkGenerator.BUNDLE_PATH}/${file}`;
            const target = `${config.output}/${file}`;
            const stats = yield fs_1.default.promises.stat(current);
            if (stats.isFile() === true) {
                const content = yield fs_1.default.promises.readFile(current, "utf8");
                if (fs_1.default.existsSync(target) === false)
                    yield fs_1.default.promises.writeFile(target, content, "utf8");
                else if (BUNDLE_CHANGES[file] !== undefined) {
                    const r = {
                        value: yield fs_1.default.promises.readFile(target, "utf8"),
                    };
                    for (const [before, after] of BUNDLE_CHANGES[file])
                        r.value = r.value.replace(before, after);
                    yield fs_1.default.promises.writeFile(target, r.value, "utf8");
                }
            }
        }
        if (config.simulate === true &&
            routes.some((r) => !!r.parameters.length)) {
            try {
                yield fs_1.default.promises.mkdir(`${config.output}/utils`);
            }
            catch (_b) { }
            yield fs_1.default.promises.copyFile(`${SdkGenerator.BUNDLE_PATH}/utils/NestiaSimulator.ts`, `${config.output}/utils/NestiaSimulator.ts`);
        }
        // STRUCTURES
        if (config.clone)
            yield SdkDtoGenerator_1.SdkDtoGenerator.generate(checker)(config)(routes);
        // FUNCTIONAL
        yield SdkFileProgrammer_1.SdkFileProgrammer.generate(config)(routes);
        // DISTRIBUTION
        if (config.distribute !== undefined)
            yield SdkDistributionComposer_1.SdkDistributionComposer.compose(config);
    });
    SdkGenerator.BUNDLE_PATH = path_1.default.join(__dirname, "..", "..", "assets", "bundle", "api");
})(SdkGenerator || (exports.SdkGenerator = SdkGenerator = {}));
const BUNDLE_CHANGES = {
    "IConnection.ts": [
        [
            `export { IConnection } from "@nestia/fetcher"`,
            `export type { IConnection } from "@nestia/fetcher"`,
        ],
    ],
    "module.ts": [
        [`export * from "./IConnection"`, `export type * from "./IConnection"`],
        [`export * from "./Primitive"`, `export type * from "./Primitive"`],
    ],
    "Primitive.ts": [
        [
            `export { Primitive } from "@nestia/fetcher"`,
            `export type { Primitive } from "@nestia/fetcher"`,
        ],
    ],
};
//# sourceMappingURL=SdkGenerator.js.map