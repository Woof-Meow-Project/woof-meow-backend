"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.E2eFileProgrammer = void 0;
const fs_1 = __importDefault(require("fs"));
const ImportDictionary_1 = require("../../utils/ImportDictionary");
const SdkDtoGenerator_1 = require("./SdkDtoGenerator");
const SdkImportWizard_1 = require("./SdkImportWizard");
var E2eFileProgrammer;
(function (E2eFileProgrammer) {
    E2eFileProgrammer.generate = (config) => (props) => (route) => __awaiter(this, void 0, void 0, function* () {
        const importer = new ImportDictionary_1.ImportDictionary(`${props.current}/${name(route)}.ts`);
        if (config.clone !== true)
            for (const tuple of route.imports)
                for (const instance of tuple[1])
                    importer.internal({
                        file: tuple[0],
                        type: true,
                        instance,
                    });
        importer.internal({
            type: false,
            file: props.api,
            instance: null,
            name: "api",
        });
        const body = arrow(config)(importer)(route);
        const content = [
            importer.toScript(props.current),
            "",
            body,
        ].join("\n");
        yield fs_1.default.promises.writeFile(importer.file, content, "utf8");
    });
    const arrow = (config) => (importer) => (route) => {
        const tab = 2;
        const headers = route.parameters.find((p) => p.category === "headers" && p.field === undefined);
        const output = [
            `await ${accessor(route)}(`,
            headers !== undefined
                ? [
                    "{",
                    "    ...connection,",
                    "    headers: {",
                    "        ...(connection.headers ?? {}),",
                    `        ...${SdkImportWizard_1.SdkImportWizard.typia(importer)}.random<${getTypeName(config)(importer)(headers)}>(),`,
                    "    },",
                    "},",
                ]
                    .map((line) => `${" ".repeat(tab * 4)}${line}`)
                    .join("\n")
                : `${" ".repeat(tab * 4)}connection,`,
            ...route.parameters
                .filter((param) => param.category !== "headers")
                .map(parameter(config)(importer)(tab)),
            `${" ".repeat((tab - 1) * 4)});`,
        ].join("\n");
        return [
            `export const ${name(route)} = async (`,
            `    connection: api.IConnection`,
            `): Promise<void> => {`,
            ...(route.output.typeName === "void"
                ? [`    ${output}`]
                : [
                    `    const output = ${output}`,
                    `    ${SdkImportWizard_1.SdkImportWizard.typia(importer)}.assert(output);`,
                ]),
            `};`,
        ].join("\n");
    };
    const parameter = (config) => (importer) => (tab) => (param) => {
        const middle = `${SdkImportWizard_1.SdkImportWizard.typia(importer)}.random<${wrap(config)(importer)(getTypeName(config)(importer)(param), param.category === "body")}>()`;
        return `${" ".repeat(4 * tab)}${middle},`;
    };
    const name = (route) => ["test", "api", ...route.accessors].join("_");
    const accessor = (route) => ["api", "functional", ...route.accessors].join(".");
    const wrap = (config) => (importer) => (name, body) => config.primitive === false
        ? name
        : `${(body
            ? SdkImportWizard_1.SdkImportWizard.Primitive
            : SdkImportWizard_1.SdkImportWizard.Resolved)(importer)}<${name}>`;
})(E2eFileProgrammer || (exports.E2eFileProgrammer = E2eFileProgrammer = {}));
const getTypeName = (config) => (importer) => (p) => p.metadata
    ? SdkDtoGenerator_1.SdkDtoGenerator.decode(config)(importer)(p.metadata)
    : p.typeName;
//# sourceMappingURL=E2eFileProgrammer.js.map