"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkFileProgrammer = void 0;
const fs_1 = __importDefault(require("fs"));
const ImportDictionary_1 = require("../../utils/ImportDictionary");
const MapUtil_1 = require("../../utils/MapUtil");
const SdkFunctionProgrammer_1 = require("./SdkFunctionProgrammer");
const SdkRouteDirectory_1 = require("./SdkRouteDirectory");
var SdkFileProgrammer;
(function (SdkFileProgrammer) {
    /* ---------------------------------------------------------
        CONSTRUCTOR
    --------------------------------------------------------- */
    SdkFileProgrammer.generate = (config) => (routeList) => __awaiter(this, void 0, void 0, function* () {
        // CONSTRUCT FOLDER TREE
        const root = new SdkRouteDirectory_1.SdkRouteDirectory(null, "functional");
        for (const route of routeList)
            emplace(root)(route);
        // ITERATE FILES
        yield iterate(config)(root)(config.output + "/functional");
    });
    const emplace = (directory) => (route) => {
        // OPEN DIRECTORIES
        for (const key of route.accessors.slice(0, -1)) {
            directory = MapUtil_1.MapUtil.take(directory.children, key, () => new SdkRouteDirectory_1.SdkRouteDirectory(directory, key));
        }
        // ADD ROUTE
        directory.routes.push(route);
    };
    /* ---------------------------------------------------------
        FILE ITERATOR
    --------------------------------------------------------- */
    const iterate = (config) => (directory) => (outDir) => __awaiter(this, void 0, void 0, function* () {
        // CREATE A NEW DIRECTORY
        try {
            yield fs_1.default.promises.mkdir(outDir);
        }
        catch (_a) { }
        // ITERATE CHILDREN
        const content = [];
        for (const [key, value] of directory.children) {
            yield iterate(config)(value)(`${outDir}/${key}`);
            content.push(`export * as ${key} from "./${key}";`);
        }
        if (content.length && directory.routes.length)
            content.push("");
        // ITERATE ROUTES
        const importer = new ImportDictionary_1.ImportDictionary(`${outDir}/index.ts`);
        if (config.simulate === true &&
            directory.routes.some((r) => !!r.parameters.length))
            importer.internal({
                file: `${config.output}/utils/NestiaSimulator.ts`,
                instance: "NestiaSimulator",
                type: false,
            });
        directory.routes.forEach((route, i) => {
            if (config.clone !== true)
                for (const tuple of route.imports)
                    for (const instance of tuple[1])
                        importer.internal({
                            file: tuple[0],
                            instance,
                            type: true,
                        });
            content.push(SdkFunctionProgrammer_1.SdkFunctionProgrammer.generate(config)(importer)(route));
            if (i !== directory.routes.length - 1)
                content.push("");
        });
        // FINALIZE THE CONTENT
        if (directory.routes.length !== 0)
            content.push(importer.toScript(outDir), "", ...content.splice(0, content.length));
        const script = "/**\n" +
            " * @packageDocumentation\n" +
            ` * @module ${directory.module}\n` +
            " * @nestia Generated by Nestia - https://github.com/samchon/nestia \n" +
            " */\n" +
            "//================================================================\n" +
            content.join("\n");
        yield fs_1.default.promises.writeFile(importer.file, script, "utf8");
    });
})(SdkFileProgrammer || (exports.SdkFileProgrammer = SdkFileProgrammer = {}));
//# sourceMappingURL=SdkFileProgrammer.js.map