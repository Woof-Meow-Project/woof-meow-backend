"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkSimulationProgrammer = void 0;
const SdkImportWizard_1 = require("./SdkImportWizard");
const SdkTypeDefiner_1 = require("./SdkTypeDefiner");
var SdkSimulationProgrammer;
(function (SdkSimulationProgrammer) {
    SdkSimulationProgrammer.generate = (config) => (importer) => (route) => {
        const output = config.propagate === true || route.output.typeName !== "void";
        const body = [
            ...(route.parameters.filter((p) => p.category !== "headers")
                .length !== 0
                ? assert(config)(importer)(route)
                : []),
            ...(output ? returns(config)(route) : []),
        ];
        return [
            `export const simulate = async (`,
            `    ${route.parameters.filter((p) => p.category !== "headers")
                .length === 0 && route.output.typeName === "void"
                ? "_connection"
                : "connection"}: ${route.parameters.some((p) => p.category === "headers" && p.field === undefined)
                ? `${SdkImportWizard_1.SdkImportWizard.IConnection(importer)}<${route.name}.Headers>`
                : SdkImportWizard_1.SdkImportWizard.IConnection(importer)},`,
            ...route.parameters
                .filter((p) => p.category !== "headers")
                .map((p) => `    ${p.name}: ${p.category === "query" || p.category === "body"
                ? `${route.name}.${p.category === "query"
                    ? "Query"
                    : "Input"}`
                : SdkTypeDefiner_1.SdkTypeDefiner.name(config)(importer)(p)},`),
            `): Promise<${output ? "Output" : "void"}> => {`,
            ...body.map((l) => `    ${l}`),
            `}`,
        ]
            .map((line) => `    ${line}`)
            .join("\n");
    };
    const assert = (config) => (importer) => (route) => {
        const typia = SdkImportWizard_1.SdkImportWizard.typia(importer);
        const func = [
            `const assert = ${importer.internal({
                file: `${config.output}/utils/NestiaSimulator.ts`,
                instance: "NestiaSimulator",
                type: false,
            })}.assert({`,
            `    method: METADATA.method,`,
            `    host: connection.host,`,
            `    path: path(${route.parameters
                .filter((p) => p.category === "param" || p.category === "query")
                .map((p) => p.name)
                .join(", ")}),`,
            `    contentType: ${JSON.stringify(route.output.contentType)},`,
            `});`,
        ];
        const individual = route.parameters
            .filter((p) => p.category !== "headers")
            .map((p) => p.category === "body"
            ? `assert.body(() => ${typia}.assert(${p.name}));`
            : p.category === "query"
                ? `assert.query(() => ${typia}.assert(${p.name}));`
                : p.category === "headers"
                    ? `assert.headers(() => ${typia}.assert(connection.headers);`
                    : `assert.param("${p.field}")(() => ${typia}.assert(${p.name}));`);
        if (config.propagate !== true)
            return [...func, ...individual];
        return [
            ...func,
            `try {`,
            ...individual.map((l) => `    ${l}`),
            `} catch (exp) {`,
            `    if (!${typia}.is<${SdkImportWizard_1.SdkImportWizard.HttpError(importer)}>(exp)) throw exp;`,
            `    return {`,
            `        success: false,`,
            `        status: exp.status,`,
            `        headers: exp.headers,`,
            `        data: exp.toJSON().message,`,
            `    } as any;`,
            `}`,
        ];
    };
    const returns = (config) => (route) => {
        var _a;
        const random = (prefix, postfix) => route.output.typeName === "void"
            ? [`${prefix} undefined${postfix}`]
            : [
                `${prefix} random(`,
                `    typeof connection.simulate === 'object' &&`,
                `        connection.simulate !== null`,
                `        ? connection.simulate`,
                `        : undefined`,
                `)${postfix}`,
            ];
        if (config.propagate !== true)
            return random("return", ";");
        return [
            `return {`,
            `    success: true,`,
            `    status: ${(_a = route.status) !== null && _a !== void 0 ? _a : (route.method === "POST" ? 201 : 200)},`,
            `    headers: {`,
            `        "Content-Type": "${route.output.contentType}",`,
            `    },`,
            ...random("data:", ",").map((r) => `    ${r}`),
            `}`,
        ];
    };
})(SdkSimulationProgrammer || (exports.SdkSimulationProgrammer = SdkSimulationProgrammer = {}));
//# sourceMappingURL=SdkSimulationProgrammer.js.map