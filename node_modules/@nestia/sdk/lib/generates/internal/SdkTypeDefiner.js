"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkTypeDefiner = void 0;
const SdkDtoGenerator_1 = require("./SdkDtoGenerator");
var SdkTypeDefiner;
(function (SdkTypeDefiner) {
    SdkTypeDefiner.name = (config) => (importer) => (p) => p.metadata
        ? SdkDtoGenerator_1.SdkDtoGenerator.decode(config)(importer)(p.metadata)
        : p.typeName;
    SdkTypeDefiner.headers = (config) => (importer) => (param) => {
        const type = SdkTypeDefiner.name(config)(importer)(param);
        if (config.primitive === false)
            return type;
        const resolved = importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "Resolved",
        });
        return `${resolved}<${type}>`;
    };
    SdkTypeDefiner.query = (config) => (importer) => (param) => {
        const type = SdkTypeDefiner.name(config)(importer)(param);
        if (config.primitive === false)
            return type;
        const resolved = importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "Resolved",
        });
        return `${resolved}<${type}>`;
    };
    SdkTypeDefiner.input = (config) => (importer) => (param) => {
        const type = SdkTypeDefiner.name(config)(importer)(param);
        if (config.primitive === false)
            return type;
        const primitive = importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "Primitive",
        });
        return `${primitive}<${type}>`;
    };
    SdkTypeDefiner.output = (config) => (importer) => (route) => {
        var _a;
        if (config.propagate !== true) {
            const type = SdkTypeDefiner.name(config)(importer)(route.output);
            if (type === "void" || config.primitive === false)
                return type;
            const primitive = importer.external({
                type: true,
                library: "@nestia/fetcher",
                instance: "Primitive",
            });
            return `${primitive}<${type}>`;
        }
        const propagation = importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "IPropagation",
        });
        const branches = [
            {
                status: String((_a = route.status) !== null && _a !== void 0 ? _a : (route.method === "POST" ? 201 : 200)),
                type: SdkTypeDefiner.name(config)(importer)(route.output),
            },
            ...Object.entries(route.exceptions).map(([status, value]) => ({
                status,
                type: SdkTypeDefiner.name(config)(importer)(value),
            })),
        ];
        return (`${propagation}<{\n` +
            branches
                .map((b) => `        ${b.status.endsWith("XX")
                ? `"${b.status}"`
                : b.status}: ${b.type};`)
                .join("\n") +
            "\n" +
            `    }${route.status ? `, ${route.status}` : ""}>`);
    };
    SdkTypeDefiner.responseBody = (config) => (importer) => (route) => SdkTypeDefiner.output(Object.assign(Object.assign({}, config), { propagate: false }))(importer)(route);
})(SdkTypeDefiner || (exports.SdkTypeDefiner = SdkTypeDefiner = {}));
//# sourceMappingURL=SdkTypeDefiner.js.map