import ts from "typescript";
import { MetadataCollection } from "typia/lib/factories/MetadataCollection";
import { INestiaConfig } from "../../INestiaConfig";
import { IRoute } from "../../structures/IRoute";
import { ISwaggerError } from "../../structures/ISwaggerError";
import { ISwaggerLazyProperty } from "../../structures/ISwaggerLazyProperty";
import { ISwaggerLazySchema } from "../../structures/ISwaggerLazySchema";
import { ISwaggerRoute } from "../../structures/ISwaggerRoute";
export declare namespace SwaggerSchemaGenerator {
    interface IProps {
        config: INestiaConfig.ISwaggerConfig;
        checker: ts.TypeChecker;
        collection: MetadataCollection;
        lazySchemas: Array<ISwaggerLazySchema>;
        lazyProperties: Array<ISwaggerLazyProperty>;
        errors: ISwaggerError[];
    }
    const response: (props: IProps) => (route: IRoute) => ISwaggerRoute.IResponseBody;
    const body: (props: IProps) => (route: IRoute) => (param: IRoute.IParameter) => ISwaggerRoute.IRequestBody;
    const parameter: (props: IProps) => (route: IRoute) => (param: IRoute.IParameter) => ISwaggerRoute.IParameter[];
}
