"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentParser = void 0;
const commander_1 = __importDefault(require("commander"));
const fs_1 = __importDefault(require("fs"));
const inquirer_1 = __importDefault(require("inquirer"));
var ArgumentParser;
(function (ArgumentParser) {
    function parse(pack) {
        return __awaiter(this, void 0, void 0, function* () {
            // PREPARE ASSETS
            commander_1.default.program.option("--manager [manager]", "package manager");
            commander_1.default.program.option("--project [project]", "tsconfig.json file location");
            // INTERNAL PROCEDURES
            const questioned = { value: false };
            const action = (closure) => {
                return new Promise((resolve, reject) => {
                    commander_1.default.program.action((options) => __awaiter(this, void 0, void 0, function* () {
                        try {
                            resolve(yield closure(options));
                        }
                        catch (exp) {
                            reject(exp);
                        }
                    }));
                    commander_1.default.program.parseAsync().catch(reject);
                });
            };
            const select = (name) => (message) => (choices, filter) => __awaiter(this, void 0, void 0, function* () {
                questioned.value = true;
                return (yield inquirer_1.default.createPromptModule()({
                    type: "list",
                    name: name,
                    message: message,
                    choices: choices,
                    filter,
                }))[name];
            });
            const configure = () => __awaiter(this, void 0, void 0, function* () {
                const fileList = yield (yield fs_1.default.promises.readdir(process.cwd()))
                    .filter((str) => str.substring(0, 8) === "tsconfig" &&
                    str.substring(str.length - 5) === ".json")
                    .sort((x, y) => x === "tsconfig.json"
                    ? -1
                    : y === "tsconfig.json"
                        ? 1
                        : x < y
                            ? -1
                            : 1);
                if (fileList.length === 0) {
                    if (process.cwd() !== pack.directory)
                        throw new Error(`Unable to find "tsconfig.json" file.`);
                    return null;
                }
                else if (fileList.length === 1)
                    return fileList[0];
                return select("tsconfig")("TS Config File")(fileList);
            });
            // DO CONSTRUCT
            return action((options) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                (_a = options.manager) !== null && _a !== void 0 ? _a : (options.manager = yield select("manager")("Package Manager")([
                    "npm",
                    "pnpm",
                    "yarn (berry is not supported)",
                ], (value) => value.split(" ")[0]));
                pack.manager = options.manager;
                (_b = options.project) !== null && _b !== void 0 ? _b : (options.project = yield configure());
                if (questioned.value)
                    console.log("");
                return options;
            }));
        });
    }
    ArgumentParser.parse = parse;
})(ArgumentParser || (exports.ArgumentParser = ArgumentParser = {}));
//# sourceMappingURL=ArgumentParser.js.map