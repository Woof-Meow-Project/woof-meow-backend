import { AcceptorBase } from "../internal/AcceptorBase";
import { IWebCommunicator } from "./internal/IWebCommunicator";
import { Invoke } from "../../components/Invoke";
/**
 * Web Socket Acceptor.
 *
 *  - available only in the NodeJS.
 *
 * The `WebAcceptor` is a communicator class interacting with the remote (web socket) client using
 * [RFC](https://github.com/samchon/tgrid#13-remote-function-call) (Remote Function Call). The
 * `WebAcceptor` objects are always created by the {@link WebServer} class whenever a remote client
 * connects to its server.
 *
 * To accept connection and start interaction with the remote client, call the {@link accept}
 * method with special `Provider`. After the {@link accept acceptance}, don't forget to closing the
 * connection after your busines has been completed. Otherwise, you don't want to accept but reject
 * the connection, call the {@link reject} method.
 *
 * Also, when declaring this {@link WebAcceptor} type, you've to define two template arguments,
 * *Header* and *Provider*. The *Header* type repersents an initial data gotten from the remote
 * client after the connection. I hope you and client not to omit it and utilize it as an
 * activation tool to enhance security.
 *
 * The second template argument *Provider* represents the features provided for the remote client.
 * If you don't have any plan to provide any feature to the remote client, just declare it as
 * `null`.
 *
 * @template Header Type of the header containing initial data.
 * @template Provider Type of features provided for the remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class WebAcceptor<Header, Provider extends object | null> extends AcceptorBase<Header, Provider> implements IWebCommunicator {
    /**
     * @hidden
     */
    private request_;
    /**
     * @hidden
     */
    private socket_;
    /**
     * @hidden
     */
    private constructor();
    /**
     * @inheritDoc
     */
    close(code?: number, reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected destructor(error?: Error): Promise<void>;
    /**
     * IP Address of client.
     */
    get ip(): string;
    /**
     * Path of client has connected.
     */
    get path(): string;
    /**
     * Get state.
     *
     * Get current state of connection state with the remote client.
     *
     * List of values are such like below:
     *
     *   - `REJECTING`: The {@link WebAcceptor.reject} method is on running.
     *   - `NONE`: The {@link WebAcceptor} instance is newly created, but did nothing yet.
     *   - `ACCEPTING`: The {@link WebAcceptor.accept} method is on running.
     *   - `OPEN`: The connection is online.
     *   - `CLOSING`: The {@link WebAcceptor.close} method is on running.
     *   - `CLOSED`: The connection is offline.
     */
    get state(): WebAcceptor.State;
    /**
     * @inheritDoc
     */
    accept(provider: Provider): Promise<void>;
    /**
     * Reject connection.
     *
     * Reject without acceptance, any interaction. The connection would be closed immediately.
     *
     * @param status Status code.
     * @param reason Detailed reason to reject.
     */
    reject(status?: number, reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): Promise<void>;
    /**
     * @hidden
     */
    private _Handle_message;
    /**
     * @hidden
     */
    private _Handle_close;
}
/**
 *
 */
export declare namespace WebAcceptor {
    /**
     * Current state of the {@link WebAcceptor}.
     */
    export import State = AcceptorBase.State;
}
