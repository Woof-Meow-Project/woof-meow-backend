/**
 * @packageDocumentation
 * @module tgrid.protocols.workers
 */
import { AcceptorBase } from "../internal/AcceptorBase";
import { IWorkerSystem } from "./internal/IWorkerSystem";
import { Invoke } from "../../components/Invoke";
/**
 * SharedWorker acceptor for client.
 *
 *  - available only in the Web Browser.
 *
 * The `SharedWorkerAcceptor` is a communicator class communicating with the remote client
 * ({@link SharedWorkerConnector}) using RFC (Remote Function Call). The `SharedAcceptor`
 * objects are always created by the {@link SharedWorkerServer} class whenever a remote client
 * connects to its server.
 *
 * To accept connection and start interaction with the remote client, call the {@link accept}
 * method with special `Provider`. After the {@link accept acceptance}, don't forget to closing
 * the connection after your business has been completed. Otherwise, you don't want to accept but
 * reject the connection, call the {@link reject} method.
 *
 * Also, when declaring this {@link SharedWorkerAcceptor} type, you've to define two template
 * arguments, *Header* and *Provider*. The *Header* type repersents an initial data gotten from
 * the remote client after the connection.
 *
 * The second template argument *Provider* represents the features provided for the remote client.
 * If you don't have any plan to provide any feature to the remote client, just declare it as
 * `null`.
 *
 * @template Header Type of the header containing initial data.
 * @template Provider Type of features provided for the remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class SharedWorkerAcceptor<Header, Provider extends object | null> extends AcceptorBase<Header, Provider> implements IWorkerSystem {
    /**
     * @hidden
     */
    private port_;
    /**
     * @hidden
     */
    private eraser_;
    /**
     * @hidden
     */
    private constructor();
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @hidden
     */
    private _Close;
    /**
     * @inheritDoc
     */
    accept(provider?: Provider | null): Promise<void>;
    /**
     * Reject connection.
     *
     * Reject without acceptance, any interaction. The connection would be closed immediately.
     *
     * @param reason Detailed reason of the rejection. Default is "Rejected by server".
     */
    reject(reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): Promise<void>;
    /**
     * @hidden
     */
    private _Handle_message;
}
/**
 *
 */
export declare namespace SharedWorkerAcceptor {
    /**
     * Current state of the {@link SharedWorkerAcceptor}.
     */
    export import State = AcceptorBase.State;
}
