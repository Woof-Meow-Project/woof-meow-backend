/**
 * @packageDocumentation
 * @module tgrid.protocols.workers
 */
import { ConnectorBase } from "../internal/ConnectorBase";
import { IWorkerSystem } from "./internal/IWorkerSystem";
import { Invoke } from "../../components/Invoke";
/**
 * SharedWorker Connector
 *
 *  - available only in the Web Browser.
 *
 * The `SharedWorkerConnector` is a communicator class, who can connect to an `SharedWorker`
 * instance and communicate with it using RFC (Remote Function Call), considering the
 * `SharedWorker` as a remote system ({@link WorkerServer}).
 *
 * You can connect to an `SharedWorker` instance with {@link connect}() method. If the
 * `SharedWorker` instance does not exist yet, a new `SharedWorker` instance would be newly
 * created. After the creation, you have to let the `SharedWorker` program to open a sever
 * using the {@link SharedWorkerServer.open}() method. Your connection would be linked with
 * a {@link SharedWorkerAcceptor} object in the server.
 *
 * After your business has been completed, you've to close the `SharedWorker` using one of
 * them below. If you don't close that, vulnerable memory usage and communication channel
 * would not be destroyed and it may cause the memory leak:
 *
 *  - {@link close}()
 *  - {@link SharedWorkerAcceptor.close}()
 *  - {@link SharedWorkerServer.close}()
 *
 * Also, when declaring this {@link SharedWorkerConnector} type, you've to define two template
 * arguments, *Header* and *Provider*. The *Header* type repersents an initial data gotten from the
 * remote client after the connection.
 *
 * The second template argument *Provider* represents the features provided for the remote system.
 * If you don't have any plan to provide any feature to the remote system, just declare it as
 * `null`.
 *
 * @template Header Type of the header containing initial data.
 * @template Provider Type of features provided for the remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class SharedWorkerConnector<Header, Provider extends object | null> extends ConnectorBase<Header, Provider> implements IWorkerSystem {
    /**
     * @hidden
     */
    private port_?;
    /**
     * Connect to remote server.
     *
     * The {@link connect}() method tries to connect an `SharedWorker` instance. If the
     * `SharedWorker` instance is not created yet, the `SharedWorker` instance would be newly
     * created. After the creation, the `SharedWorker` program must open that server using
     * the {@link SharedWorkerServer.open}() method.
     *
     * After you business has been completed, you've to close the `SharedWorker` using one of
     * them below. If you don't close that, vulnerable memory usage and communication channel
     * would not be destroyed and it may cause the memory leak:
     *
     *  - {@link close}()
     *  - {@link ShareDWorkerAcceptor.close}()
     *  - {@link SharedWorkerServer.close}()
     *
     * @param jsFile JS File to be {@link SharedWorkerServer}.
     * @param options Detailed options like timeout.
     */
    connect(jsFile: string, options?: Partial<SharedWorkerConnector.IConnectOptions>): Promise<void>;
    /**
     * @hidden
     */
    private _Handshake;
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): Promise<void>;
    /**
     * @hidden
     */
    private _Handle_message;
    /**
     * @hidden
     */
    private _Handle_close;
}
/**
 *
 */
export declare namespace SharedWorkerConnector {
    /**
     * Current state of the {@link SharedWorkerConnector}.
     */
    export import State = ConnectorBase.State;
    /**
     * Connection options for the {@link SharedWorkerConnector.connect}.
     */
    interface IConnectOptions {
        /**
         * Milliseconds to wait the shared-worker server to accept or reject it. If omitted, the waiting would be forever.
         */
        timeout: number;
    }
    /**
     * Compile JS source code.
     *
     * @param content Source code
     * @return Temporary URL.
     */
    function compile(content: string): Promise<string>;
    /**
     * Remove compiled JS file.
     *
     * @param url Temporary URL.
     */
    function remove(url: string): Promise<void>;
}
