"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedWorkerServer = void 0;
var SharedWorkerAcceptor_1 = require("./SharedWorkerAcceptor");
var once_1 = require("../internal/once");
var DomainError_1 = require("tstl/exception/DomainError");
var HashSet_1 = require("tstl/container/HashSet");
var node_1 = require("tstl/utility/node");
/**
 * SharedWorker server.
 *
 *  - available only in the Web Browser.
 *
 * The `SharedWorkerServer` is a class representing a server server in a `SharedWorker`
 * environment. Clients connecting to the `SharedWorkerServer` would communicate with this
 * server through {@link SharedWorkerAcceptor} objects using RFC (Remote Function Call).
 *
 * To open the server, use the {@link open}() method with a callback function which would be
 * called whenever a client has been connected. After your business, don't forget to closing
 * the connection using one of them below. If you don't close that, vulnerable memory usage
 * and communication channel would not be destroyed and it may cause the memory leak.
 *
 *  - {@link close}()
 *  - {@link SharedWorkerAcceptor.close}()
 *  - {@link SharedWorkerConnector.close}()
 *
 * Also, when declaring this {@link SharedWorkerServer} type, you've to define two template
 * arguments, *Header* and *Provider*. The *Header* type repersents an initial data gotten from the
 * remote client after the connection.
 *
 * The second template argument *Provider* represents the features provided for the remote client.
 * If you don't have any plan to provide any feature to the remote client, just declare it as
 * `null`.
 *
 * @template Header Type of the header containing initial data.
 * @template Provider Type of features provided for the remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
var SharedWorkerServer = /** @class */ (function () {
    /* ----------------------------------------------------------------
        CONSTRUCTOR
    ---------------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function SharedWorkerServer() {
        this.acceptors_ = new HashSet_1.HashSet();
        this.state_ = -1 /* SharedWorkerServer.State.NONE */;
    }
    /**
     * Open shared worker server.
     *
     * Open a server through the shared worker protocol, with *handler* function determining
     * whether to accept the client's connection or not. After the server has been opened, clients
     * can connect to that websocket server by using the {@link SharedWorkerServer} class.
     *
     * When implementing the *handler* function with the {@link SharedWorkerServer} instance, calls
     * the {@link SharedWorkerAcceptor.accept} method if you want to accept the new client's
     * connection. Otherwise you dont't want to accept the client and reject its connection, just
     * calls the {@link SharedWorkerAcceptor.reject} instead.
     *
     * @param handler Callback function called whenever client connects.
     */
    SharedWorkerServer.prototype.open = function (handler) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // TEST CONDITION
                if ((0, node_1.is_node)() === true)
                    throw new DomainError_1.DomainError("Error on SharedWorkerServer.open(): SharedWorker is not supported in the NodeJS.");
                else if (self.document !== undefined)
                    throw new DomainError_1.DomainError("Error on SharedWorkerServer.open(): this is not the SharedWorker.");
                else if (this.state_ !== -1 /* SharedWorkerServer.State.NONE */)
                    throw new DomainError_1.DomainError("Error on SharedWorkerServer.open(): the server has been opened yet.");
                //----
                // OPE SHARED-WORKER
                //----
                this.state_ = 0 /* SharedWorkerServer.State.OPENING */;
                {
                    self.addEventListener("connect", function (evt) {
                        var e_1, _a;
                        try {
                            for (var _b = __values(evt.ports), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var port = _c.value;
                                _this._Handle_connect(port, handler);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    });
                }
                this.state_ = 1 /* SharedWorkerServer.State.OPEN */;
                return [2 /*return*/];
            });
        });
    };
    /**
     * Close server.
     *
     * Close all connections between its remote clients ({@link SharedWorkerConnector}s).
     *
     * It destories all RFCs (remote function calls) between this server and remote clients
     * (through `Driver<Controller>`) that are not returned (completed) yet. The destruction
     * causes all incompleted RFCs to throw exceptions.
     */
    SharedWorkerServer.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, acceptor, e_2_1;
            var e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // TEST VALIDATION
                        if (this.state_ !== 1 /* SharedWorkerServer.State.OPEN */)
                            throw new DomainError_1.DomainError("Error on SharedWorkerServer.close(): the server is not opened.");
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(this.acceptors_), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        acceptor = _b.value;
                        return [4 /*yield*/, acceptor.close()];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @hidden
     */
    SharedWorkerServer.prototype._Handle_connect = function (port, handler) {
        var _this = this;
        port.onmessage = (0, once_1.once)(function (evt) {
            // ARGUMENTS
            var wrapper = JSON.parse(evt.data);
            // CREATE ACCEPTOR
            /* eslint-disable */
            var acceptor;
            acceptor = SharedWorkerAcceptor_1.SharedWorkerAcceptor.create(port, wrapper.header, function () {
                _this.acceptors_.erase(acceptor);
            });
            _this.acceptors_.insert(acceptor);
            // SHIFT TO THE CALLBACK
            handler(acceptor);
        });
        port.postMessage(0 /* SharedWorkerServer.State.OPENING */);
    };
    Object.defineProperty(SharedWorkerServer.prototype, "state", {
        /* ----------------------------------------------------------------
            ACCESSORS
        ---------------------------------------------------------------- */
        /**
         * Get server state.
         *
         * Get current state of the websocket server.
         *
         * List of values are such like below:
         *
         *   - `NONE`: The `{@link SharedWorkerServer} instance is newly created, but did nothing yet.
         *   - `OPENING`: The {@link SharedWorkerServer.open} method is on running.
         *   - `OPEN`: The websocket server is online.
         *   - `CLOSING`: The {@link SharedWorkerServer.close} method is on running.
         *   - `CLOSED`: The websocket server is offline.
         */
        get: function () {
            return this.state_;
        },
        enumerable: false,
        configurable: true
    });
    return SharedWorkerServer;
}());
exports.SharedWorkerServer = SharedWorkerServer;
/**
 *
 */
(function (SharedWorkerServer) {
})(SharedWorkerServer || (exports.SharedWorkerServer = SharedWorkerServer = {}));
//# sourceMappingURL=SharedWorkerServer.js.map