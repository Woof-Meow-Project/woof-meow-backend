import { Communicator } from "../../components/Communicator";
import { IServer } from "../internal/IServer";
import { IWorkerSystem } from "./internal/IWorkerSystem";
import { Invoke } from "../../components/Invoke";
/**
 * Worker Server.
 *
 * The `WorkerServer` is a class representing a `Worker` server who can communicate with
 * remote client, parent and creator of the `Worker` (anyway {@link WorkerConnector}), using
 * RFC (Remote Function Call).
 *
 * Unlike other servers, `WorkerServer` can accept only a client ({@link WorkerConnector})
 * because the worker is dependent on its parent instance (web page, node or parent worker).
 * Thus, `WorkerServer` does not have any acceptor and communicates with client (its parent)
 * by itself.
 *
 * To start communication with the remote client, call the {@link open}() method with special
 * `Provider`. After your business, don't forget terminating this worker using {@link close}()
 * or {@link WorkerConnector.close}() method. If you don't terminate it, then vulnerable
 * memory and communication channel would be kept and it may cause the memory leak.
 *
 * Also, when declaring this {@link WorkerServer} type, you've to define two template arguments,
 * *Header* and *Provider*. The *Header* type repersents an initial data gotten from the remote
 * system after the connection.
 *
 * The second template argument *Provider* represents the features provided for the remote system.
 * If you don't have any plan to provide any feature to the remote system, just declare it as
 * `null`.
 *
 * @template Header Type of header containing initialization data like activation.
 * @template Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class WorkerServer<Header, Provider extends object | null> extends Communicator<Provider | undefined> implements IWorkerSystem, IServer<WorkerServer.State> {
    /**
     * @hidden
     */
    private channel_;
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private header_;
    /**
     * Default Constructor.
     *
     * @param type You can specify the worker mode when NodeJS. Default is "thread".
     */
    constructor();
    /**
     * Open server with `Provider`.
     *
     * Open worker server and start communication with the remote system
     * ({@link WorkerConnector}).
     *
     * Note that, after your business, you should terminate this worker to prevent waste
     * of memory leak. Close this worker by yourself ({@link close}) or let remote client to
     * close this worker ({@link WorkerConnector.close}).
     *
     * @param provider An object providing featrues for the remote system.
     */
    open(provider: Provider): Promise<void>;
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @inheritDoc
     */
    get state(): WorkerServer.State;
    /**
     * Get header containing initialization data like activation.
     */
    getHeader(): Promise<Header>;
    /**
     * @hidden
     */
    private _Handshake;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): Promise<void>;
    /**
     * @hidden
     */
    protected inspectReady(): Error | null;
    /**
     * @hidden
     */
    private _Handle_message;
}
/**
 *
 */
export declare namespace WorkerServer {
    /**
     * Current state of the {@link WorkerServer}.
     */
    export import State = IServer.State;
}
