/**
 * @packageDocumentation
 * @module tgrid.utils
 */
import { Dictionary } from "./internal/Dictionary";
import { XMLList } from "./XMLList";
import { IPair } from "tstl/utility/IPair";
import { HashMap } from "tstl/container/HashMap";
/**
 * The XML parser
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class XML extends Dictionary<XMLList> implements Omit<HashMap<string, XMLList>, "toJSON"> {
    /**
     * @hidden
     */
    private tag_;
    /**
     * @hidden
     */
    private value_;
    /**
     * @hidden
     */
    private property_map_;
    constructor();
    constructor(str: string);
    constructor(xml: XML);
    /**
     * @hidden
     */
    private _Copy_constructor;
    /**
     * @hidden
     */
    private _Parser_constructor;
    /**
     * @hidden
     */
    private _Parse;
    /**
     * @hidden
     */
    private _Parse_tag;
    /**
     * @hidden
     */
    private _Parse_properties;
    /**
     * @hidden
     */
    private _Parse_value;
    /**
     * @hidden
     */
    private _Parse_children;
    getTag(): string;
    getValue(): string;
    findProperty(key: string): HashMap.Iterator<string, string>;
    hasProperty(key: string): boolean;
    getProperty(key: string): string;
    getPropertyMap(): HashMap<string, string>;
    setTag(val: string): void;
    setValue(val: string): void;
    insertValue(tag: string, value: string): XML;
    setProperty(key: string, value: string): void;
    eraseProperty(key: string): void;
    push(...args: IPair<string, XMLList>[]): number;
    push(...xmls: XML[]): number;
    push(...xmlLists: XMLList[]): number;
    /**
     * @hidden
     */
    protected _Handle_insert(first: HashMap.Iterator<string, XMLList>, last: HashMap.Iterator<string, XMLList>): void;
    toJSON(): string;
    toString(): string;
    /**
     * @hidden
     */
    private static _Compute_min_index;
}
export declare namespace XML {
    type Iterator = HashMap.Iterator<string, XMLList>;
    type ReverseIterator = HashMap.ReverseIterator<string, XMLList>;
    function head(encoding?: string): string;
    function encode_value(str: string): string;
    function encode_property(str: string): string;
    function decode_value(str: string): string;
    function decode_property(str: string): string;
}
