"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataFactory = void 0;
var Metadata_1 = require("../schemas/metadata/Metadata");
var explore_metadata_1 = require("./internal/metadata/explore_metadata");
var iterate_metadata_collection_1 = require("./internal/metadata/iterate_metadata_collection");
var iterate_metadata_sort_1 = require("./internal/metadata/iterate_metadata_sort");
var MetadataFactory;
(function (MetadataFactory) {
    MetadataFactory.analyze = function (checker) {
        return function (options) {
            return function (collection) {
                return function (type) {
                    var errors = [];
                    var meta = (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(errors)(type, {
                        top: true,
                        object: null,
                        property: null,
                        nested: null,
                        escaped: false,
                        aliased: false,
                    });
                    (0, iterate_metadata_collection_1.iterate_metadata_collection)(errors)(collection);
                    (0, iterate_metadata_sort_1.iterate_metadata_sort)(collection)(meta);
                    if (options.validate)
                        errors.push.apply(errors, __spreadArray([], __read(validate(options)(options.validate)(meta)), false));
                    return errors.length
                        ? {
                            success: false,
                            errors: errors,
                        }
                        : {
                            success: true,
                            data: meta,
                        };
                };
            };
        };
    };
    MetadataFactory.soleLiteral = function (value) {
        var meta = Metadata_1.Metadata.initialize();
        meta.constants.push({
            values: [value],
            type: "string",
        });
        return meta;
    };
    var validate = function (options) {
        return function (functor) {
            return function (meta) {
                var visitor = {
                    functor: functor,
                    errors: [],
                    objects: new Set(),
                    arrays: new Set(),
                    tuples: new Set(),
                    aliases: new Set(),
                };
                validateMeta(options)(visitor)(meta, {
                    object: null,
                    property: null,
                    nested: null,
                    top: true,
                    aliased: false,
                    escaped: false,
                });
                return visitor.errors;
            };
        };
    };
    var validateMeta = function (options) {
        return function (visitor) {
            return function (meta, explore) {
                var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
                var result = new Set(visitor.functor(meta, explore));
                if (result.size)
                    visitor.errors.push({
                        name: meta.getName(),
                        explore: __assign({}, explore),
                        messages: __spreadArray([], __read(result), false),
                    });
                try {
                    for (var _g = __values(meta.aliases), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var alias = _h.value;
                        validateAlias(options)(visitor)(alias, explore);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                try {
                    for (var _j = __values(meta.arrays), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var array = _k.value;
                        validateArray(options)(visitor)(array.type, explore);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                try {
                    for (var _l = __values(meta.tuples), _m = _l.next(); !_m.done; _m = _l.next()) {
                        var tuple = _m.value;
                        validateTuple(options)(visitor)(tuple.type, explore);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                try {
                    for (var _o = __values(meta.objects), _p = _o.next(); !_p.done; _p = _o.next()) {
                        var obj = _p.value;
                        validateObject(options)(visitor)(obj);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                try {
                    for (var _q = __values(meta.sets), _r = _q.next(); !_r.done; _r = _q.next()) {
                        var set = _r.value;
                        validateMeta(options)(visitor)(set, explore);
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                try {
                    for (var _s = __values(meta.maps), _t = _s.next(); !_t.done; _t = _s.next()) {
                        var map = _t.value;
                        validateMeta(options)(visitor)(map.key, explore);
                        validateMeta(options)(visitor)(map.value, explore);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_t && !_t.done && (_f = _s.return)) _f.call(_s);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                if (options.escape === true && meta.escaped !== null)
                    validateMeta(options)(visitor)(meta.escaped.returns, __assign(__assign({}, explore), { escaped: true }));
            };
        };
    };
    var validateAlias = function (options) {
        return function (visitor) {
            return function (alias, explore) {
                if (visitor.aliases.has(alias))
                    return;
                visitor.aliases.add(alias);
                validateMeta(options)(visitor)(alias.value, __assign(__assign({}, explore), { nested: alias, aliased: true }));
            };
        };
    };
    var validateArray = function (options) {
        return function (visitor) {
            return function (array, explore) {
                if (visitor.arrays.has(array))
                    return;
                visitor.arrays.add(array);
                validateMeta(options)(visitor)(array.value, __assign(__assign({}, explore), { nested: array, top: false }));
            };
        };
    };
    var validateTuple = function (options) {
        return function (visitor) {
            return function (tuple, explore) {
                var e_7, _a;
                if (visitor.tuples.has(tuple))
                    return;
                visitor.tuples.add(tuple);
                try {
                    for (var _b = __values(tuple.elements), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var elem = _c.value;
                        validateMeta(options)(visitor)(elem, __assign(__assign({}, explore), { nested: tuple, top: false }));
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            };
        };
    };
    var validateObject = function (options) {
        return function (visitor) {
            return function (object) {
                var e_8, _a;
                if (visitor.objects.has(object))
                    return;
                visitor.objects.add(object);
                if (options.validate) {
                    var explore = {
                        object: object,
                        top: false,
                        property: null,
                        nested: null,
                        escaped: false,
                        aliased: false,
                    };
                    var errors = options.validate(Metadata_1.Metadata.create(__assign(__assign({}, Metadata_1.Metadata.initialize()), { objects: [object] })), explore);
                    if (errors.length)
                        visitor.errors.push({
                            name: object.name,
                            explore: explore,
                            messages: __spreadArray([], __read(new Set(errors)), false),
                        });
                }
                try {
                    for (var _b = __values(object.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var property = _c.value;
                        validateMeta(options)(visitor)(property.value, {
                            object: object,
                            property: property.key.isSoleLiteral()
                                ? property.key.getSoleLiteral()
                                : {},
                            nested: null,
                            top: false,
                            aliased: false,
                            escaped: false,
                        });
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            };
        };
    };
})(MetadataFactory || (exports.MetadataFactory = MetadataFactory = {}));
//# sourceMappingURL=MetadataFactory.js.map