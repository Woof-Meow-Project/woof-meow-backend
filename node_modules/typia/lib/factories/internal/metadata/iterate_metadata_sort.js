"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_sort = void 0;
var Metadata_1 = require("../../../schemas/metadata/Metadata");
var MetadataObject_1 = require("../../../schemas/metadata/MetadataObject");
var iterate_metadata_sort = function (collection) { return function (meta) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
    var visited = new Set();
    try {
        for (var _f = __values(collection.arrays()), _g = _f.next(); !_g.done; _g = _f.next()) {
            var array = _g.value;
            iterate(visited)(collection)(array.value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _h = __values(collection.tuples()), _j = _h.next(); !_j.done; _j = _h.next()) {
            var tuple = _j.value;
            try {
                for (var _k = (e_3 = void 0, __values(tuple.elements)), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var element = _l.value;
                    iterate(visited)(collection)(element);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var _m = __values(collection.objects()), _o = _m.next(); !_o.done; _o = _m.next()) {
            var object = _o.value;
            try {
                for (var _p = (e_5 = void 0, __values(object.properties)), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var property = _q.value;
                    iterate(visited)(collection)(property.value);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
        }
        finally { if (e_4) throw e_4.error; }
    }
    iterate(visited)(collection)(meta);
}; };
exports.iterate_metadata_sort = iterate_metadata_sort;
var iterate = function (visited) {
    return function (collection) {
        return function (meta) {
            var e_6, _a, e_7, _b;
            if (visited.has(meta))
                return;
            visited.add(meta);
            try {
                for (var _c = __values(meta.maps), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var map = _d.value;
                    iterate(visited)(collection)(map.value);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _e = __values(meta.sets), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var set = _f.value;
                    iterate(visited)(collection)(set);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_7) throw e_7.error; }
            }
            if (meta.escaped !== null)
                iterate(visited)(collection)(meta.escaped.returns);
            if (meta.rest !== null)
                iterate(visited)(collection)(meta.rest);
            if (meta.objects.length > 1) {
                meta.objects.sort(function (x, y) {
                    return MetadataObject_1.MetadataObject.covers(x, y)
                        ? -1
                        : MetadataObject_1.MetadataObject.covers(y, x)
                            ? 1
                            : 0;
                });
                meta.union_index = collection.getUnionIndex(meta);
            }
            if (meta.arrays.length > 1)
                meta.arrays.sort(function (x, y) {
                    return Metadata_1.Metadata.covers(x.type.value, y.type.value)
                        ? -1
                        : Metadata_1.Metadata.covers(y.type.value, x.type.value)
                            ? 1
                            : 0;
                });
            if (meta.tuples.length > 1)
                meta.tuples.sort(function (x, y) {
                    var xt = Metadata_1.Metadata.initialize();
                    var yt = Metadata_1.Metadata.initialize();
                    xt.tuples.push(x);
                    yt.tuples.push(y);
                    return Metadata_1.Metadata.covers(xt, yt)
                        ? -1
                        : Metadata_1.Metadata.covers(yt, xt)
                            ? 1
                            : 0;
                });
        };
    };
};
//# sourceMappingURL=iterate_metadata_sort.js.map