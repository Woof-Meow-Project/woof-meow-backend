"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = void 0;
var RandomGenerator_1 = require("../utils/RandomGenerator");
var TypeGuardError_1 = require("../TypeGuardError");
var _HeadersReader_1 = require("./$HeadersReader");
var _ParameterReader_1 = require("./$ParameterReader");
var _ProtobufReader_1 = require("./$ProtobufReader");
var _ProtobufSizer_1 = require("./$ProtobufSizer");
var _ProtobufWriter_1 = require("./$ProtobufWriter");
var _QueryReader_1 = require("./$QueryReader");
var _any_1 = require("./$any");
var _every_1 = require("./$every");
var _guard_1 = require("./$guard");
var _is_between_1 = require("./$is_between");
var _join_1 = require("./$join");
var _number_1 = require("./$number");
var _report_1 = require("./$report");
var _rest_1 = require("./$rest");
var _string_1 = require("./$string");
var _strlen_1 = require("./$strlen");
var _tail_1 = require("./$tail");
var Namespace;
(function (Namespace) {
    Namespace.is = function () { return ({
        is_between: _is_between_1.$is_between,
    }); };
    Namespace.assert = function (method) { return (__assign(__assign({}, Namespace.is()), { join: _join_1.$join, every: _every_1.$every, guard: (0, _guard_1.$guard)("typia.".concat(method)), predicate: function (matched, exceptionable, closure) {
            if (matched === false && exceptionable === true)
                throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, closure()), { method: "typia.".concat(method) }));
            return matched;
        } })); };
    Namespace.validate = function () { return (__assign(__assign({}, Namespace.is()), { join: _join_1.$join, report: _report_1.$report, predicate: function (res) {
            return function (matched, exceptionable, closure) {
                if (matched === false && exceptionable === true)
                    (function () {
                        res.success && (res.success = false);
                        var errorList = res.errors;
                        var error = closure();
                        if (errorList.length) {
                            var last = errorList[errorList.length - 1].path;
                            if (last.length >= error.path.length &&
                                last.substring(0, error.path.length) ===
                                    error.path)
                                return;
                        }
                        errorList.push(error);
                        return;
                    })();
                return matched;
            };
        } })); };
    var json;
    (function (json) {
        json.stringify = function (method) { return (__assign(__assign({}, Namespace.is()), { number: _number_1.$number, string: _string_1.$string, tail: _tail_1.$tail, rest: _rest_1.$rest, throws: $throws("json.".concat(method)) })); };
    })(json = Namespace.json || (Namespace.json = {}));
    var protobuf;
    (function (protobuf) {
        protobuf.decode = function (method) { return ({
            Reader: _ProtobufReader_1.$ProtobufReader,
            throws: $throws("protobuf.".concat(method)),
        }); };
        protobuf.encode = function (method) { return ({
            Sizer: _ProtobufSizer_1.$ProtobufSizer,
            Writer: _ProtobufWriter_1.$ProtobufWriter,
            strlen: _strlen_1.$strlen,
            throws: $throws(method),
        }); };
    })(protobuf = Namespace.protobuf || (Namespace.protobuf = {}));
    var http;
    (function (http) {
        http.query = function () { return _QueryReader_1.$QueryReader; };
        http.headers = function () { return _HeadersReader_1.$HeadersReader; };
        http.parameter = function () { return _ParameterReader_1.$ParameterReader; };
    })(http = Namespace.http || (Namespace.http = {}));
    var misc;
    (function (misc) {
        misc.clone = function (method) { return (__assign(__assign({}, Namespace.is()), { throws: $throws("misc.".concat(method)), any: _any_1.$any })); };
        misc.prune = function (method) { return (__assign(__assign({}, Namespace.is()), { throws: $throws("misc.".concat(method)) })); };
    })(misc = Namespace.misc || (Namespace.misc = {}));
    Namespace.random = function () { return ({
        generator: RandomGenerator_1.RandomGenerator,
        pick: RandomGenerator_1.RandomGenerator.pick,
    }); };
    var $throws = function (method) {
        return function (props) {
            throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "typia.".concat(method) }));
        };
    };
})(Namespace || (exports.Namespace = Namespace = {}));
//# sourceMappingURL=Namespace.js.map