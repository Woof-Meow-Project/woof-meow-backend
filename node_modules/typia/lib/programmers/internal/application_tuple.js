"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_tuple = void 0;
var Metadata_1 = require("../../schemas/metadata/Metadata");
var application_schema_1 = require("./application_schema");
var application_tuple = function (options) {
    return function (components) {
        return function (tuple) {
            return function (attribute) {
                var _a, _b, _c;
                var schema = __assign(__assign({ type: "array", items: tuple.type.elements.map(function (meta, i) {
                        var _a;
                        return (0, application_schema_1.application_schema)(options)(false)(components)((_a = meta.rest) !== null && _a !== void 0 ? _a : meta)(__assign(__assign({}, attribute), { "x-typia-rest": i === tuple.type.elements.length - 1 &&
                                meta.rest !== null, "x-typia-required": meta.required, "x-typia-optional": meta.optional }));
                    }) }, attribute), { minItems: !!((_a = tuple.type.elements.at(-1)) === null || _a === void 0 ? void 0 : _a.rest)
                        ? tuple.type.elements.length - 1
                        : tuple.type.elements.filter(function (x) { return !x.optional; }).length, maxItems: !!((_b = tuple.type.elements.at(-1)) === null || _b === void 0 ? void 0 : _b.rest)
                        ? undefined
                        : tuple.type.elements.length });
                if (options.purpose === "ajv")
                    if (tuple.type.elements.length === 0)
                        return schema;
                    else if (!((_c = tuple.type.elements.at(-1)) === null || _c === void 0 ? void 0 : _c.rest))
                        return schema;
                var wrapper = __assign(__assign({}, schema), { items: (0, application_schema_1.application_schema)(options)(false)(components)(tuple.type.elements.reduce(function (x, y) { var _a, _b; return Metadata_1.Metadata.merge((_a = x.rest) !== null && _a !== void 0 ? _a : x, (_b = y.rest) !== null && _b !== void 0 ? _b : y); }, Metadata_1.Metadata.initialize()))(tuple.type.recursive ? {} : attribute), "x-typia-tuple": schema, minItems: schema.minItems, maxItems: schema.maxItems });
                return wrapper;
            };
        };
    };
};
exports.application_tuple = application_tuple;
//# sourceMappingURL=application_tuple.js.map