"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileTransformer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var NodeTransformer_1 = require("./NodeTransformer");
var FileTransformer;
(function (FileTransformer) {
    FileTransformer.transform = function (project) {
        return function (context) {
            return function (file) {
                if (file.isDeclarationFile)
                    return file;
                return typescript_1.default.visitEachChild(file, function (node) { return iterate_node(__assign(__assign({}, project), { context: context }))(context)(node); }, context);
            };
        };
    };
    var iterate_node = function (project) {
        return function (context) {
            return function (node) {
                var _a;
                return typescript_1.default.visitEachChild((_a = try_transform_node(project)(node)) !== null && _a !== void 0 ? _a : node, function (child) { return iterate_node(project)(context)(child); }, context);
            };
        };
    };
    var try_transform_node = function (project) {
        return function (node) {
            try {
                return NodeTransformer_1.NodeTransformer.transform(project)(node);
            }
            catch (exp) {
                if (!isTransformerError(exp))
                    throw exp;
                var diagnostic = typescript_1.default.createDiagnosticForNode(node, {
                    key: exp.code,
                    category: typescript_1.default.DiagnosticCategory.Error,
                    message: exp.message,
                    code: "(".concat(exp.code, ")"),
                });
                project.extras.addDiagnostic(diagnostic);
                return null;
            }
        };
    };
})(FileTransformer || (exports.FileTransformer = FileTransformer = {}));
var isTransformerError = function (error) {
    return typeof error === "object" &&
        error !== null &&
        error.constructor.name === "TransformerError" &&
        typeof error.code === "string" &&
        typeof error.message === "string";
};
//# sourceMappingURL=FileTransformer.js.map